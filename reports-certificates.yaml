swagger: '2.0'
info:
  description: Report and Certificate service for eDropin
  version: 1.0.0
  title: eDropin Reports/Certificates
  license:
    name: UNLICENSED
  contact:
    name: Saj Arora
    email: dev@edropin.com
host: 'localhost:8080'
basePath: /v1
tags:
  - name: config
    description: Application configuration
  - name: admin
    description: Admin functions
  - name: cron
    description: Cron tasks that are run on a schedule
  - name: webhooks
    description: Web hooks for 3rd party plugins
  - name: mail
    description: Handle browser mail
  - name: certificates
    description: User certificates on eDropin
  - name: reports
    description: Reports on eDropin
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  Authorization:
    type: apiKey
    in: header
    name: Authorization
security:
  - Authorization: []
paths:
  ### Configuration
  '/admin/app-config':
    get:
      tags:
        - config
      security: []
      operationId: get_config
      summary: Get App Config
      responses:
        '200':
          description: Application Configuration updated
          schema:
            $ref: '#/definitions/AppConfig'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - config
      security: []
      operationId: upsert_config
      summary: Set App Config
      parameters:
        - in: body
          name: configuration
          description: App Configuration object
          required: true
          schema:
            $ref: '#/definitions/AppConfig'
      responses:
        '200':
          description: Application Configuration updated
          schema:
            $ref: '#/definitions/AppConfig'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  ### End of Configuration
  
  ### Admin
  /admin:
    get:
      tags:
        - admin
      security: []
      operationId: welcome_admin
      summary: Get Admin status
      produces:
        - text/plain
      responses:
        '200':
          description: Admin status - OK
          schema:
            type: string
        '401':
          $ref: '#/responses/UnauthorizedError'
  '/admin/load-mail-templates':
    post:
      tags:
        - admin
      security: []
      summary: Initialize mail templates
      operationId: admin_init_mail_templates
      responses:
        '200':
          description: Mail Template Ids
          schema:
            type: array
            items:
              type: string
        '401':
          $ref: '#/responses/UnauthorizedError'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  ### End of admin
  
  ### Cron tasks
  /cron/mail:
    get:
      tags:
        - cron
      security: []
      summary: Process all mail
      operationId: process_mail
      responses:
        '200':
          description: Started processing mail
        '401':
          $ref: '#/responses/UnauthorizedError'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  /cron/search:
    get:
      tags:
        - cron
      security: []
      summary: Process all search
      operationId: process_search
      responses:
        '200':
          description: Started processing search
        '401':
          $ref: '#/responses/UnauthorizedError'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  ### End of cron tasks
  
  ### Mail
  '/mail/secure/{secureToken}':
    get:
      tags:
        - mail
      security: []
      summary: Get mail from secure token
      operationId: get_mail_secure
      parameters:
        - in: path
          name: secureToken
          required: true
          description: Secure Mail Token
          type: string
      responses:
        '200':
          description: Get notifiation mail using secure token
          schema:
            $ref: '#/definitions/MailHTML'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Notification not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  ### End Mail
  
  ### Certificates
  '/certificates':
    get:
      tags:
        - certificates
      summary: Get Certificates
      operationId: get_all_certificates
      parameters:
        - $ref: '#/parameters/start_cursor'
        - $ref: '#/parameters/page_size'
      responses:
        '200':
          description: Certificate
          schema:
            $ref: '#/definitions/PagedCertificate'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    post:
      tags:
        - certificates
      summary: Create certificate
      operationId: create_certificate
      parameters:
        - in: body
          name: certificate_props
          description: Certificate object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Certificate'
      responses:
        '200':
          description: Certificate created
          schema:
            $ref: '#/definitions/Certificate'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/certificates/{certificate_id}':
    parameters:
      - $ref: '#/parameters/certificate_id'
    get:
      tags:
        - certificates
      summary: Get a certificate from the directory
      operationId: get_certificate
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Certificate'
        '400':
          description: Invalid ID supplied
        '404':
          description: Certificate not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - certificates
      summary: Update an existing certificate
      operationId: update_certificate
      parameters:
        - in: body
          name: certificate_props
          description: Certificate object that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Certificate'
      responses:
        '200':
          description: Certificate updated
          schema:
            $ref: '#/definitions/Certificate'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Certificate not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      tags:
        - certificates
      summary: Delete an existing certificate
      operationId: delete_certificate
      responses:
        '204':
          description: Certificate deleted
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Certificate not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  
  
  '/certificates/secure/{secure_token}':
    get:
      tags:
        - certificates
      security: []
      summary: Get a certificate using a secure token
      operationId: get_secure_certificate
      parameters:
        - in: path
          name: secure_token
          description: Secure Token
          type: string
          required: true
      responses:
        '200':
          description: A Secure certificate
          schema:
            $ref: '#/definitions/Certificate'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  ### End of Courses
  
  ### Reports
  '/events/{event_id}/attendees':
    get:
      tags:
        - reports
      summary: Get Attendance Reports
      operationId: get_all_attendance_reports
      parameters:
        - $ref: '#/parameters/event_id'
        # - $ref: '#/parameters/start_cursor'
        # - $ref: '#/parameters/page_size'
      responses:
        '200':
          description: Certificate
          schema:
            $ref: '#/definitions/PagedCertificate'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  #   post:
  #     tags:
  #       - certificates
  #     summary: Create certificate
  #     operationId: create_certificate
  #     parameters:
  #       - in: body
  #         name: certificate_props
  #         description: Certificate object that needs to be created
  #         required: true
  #         schema:
  #           $ref: '#/definitions/Certificate'
  #     responses:
  #       '200':
  #         description: Certificate created
  #         schema:
  #           $ref: '#/definitions/Certificate'
  #       '400':
  #         description: Invalid ID supplied
  #       '401':
  #         $ref: '#/responses/UnauthorizedError'
  #       '405':
  #         $ref: '#/responses/InvalidInputResponse'
  #       '500':
  #         $ref: '#/responses/Default500ErrorResponse'
  # '/certificates/{certificate_id}':
  #   parameters:
  #     - $ref: '#/parameters/certificate_id'
  #   get:
  #     tags:
  #       - certificates
  #     summary: Get a certificate from the directory
  #     operationId: get_certificate
  #     responses:
  #       '200':
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/Certificate'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Certificate not found
  #       '500':
  #         $ref: '#/responses/Default500ErrorResponse'
  #   put:
  #     tags:
  #       - certificates
  #     summary: Update an existing certificate
  #     operationId: update_certificate
  #     parameters:
  #       - in: body
  #         name: certificate_props
  #         description: Certificate object that needs to be updated
  #         required: true
  #         schema:
  #           $ref: '#/definitions/Certificate'
  #     responses:
  #       '200':
  #         description: Certificate updated
  #         schema:
  #           $ref: '#/definitions/Certificate'
  #       '400':
  #         description: Invalid ID supplied
  #       '401':
  #         $ref: '#/responses/UnauthorizedError'
  #       '404':
  #         description: Certificate not found
  #       '405':
  #         $ref: '#/responses/InvalidInputResponse'
  #       '500':
  #         $ref: '#/responses/Default500ErrorResponse'
  #   delete:
  #     tags:
  #       - certificates
  #     summary: Delete an existing certificate
  #     operationId: delete_certificate
  #     responses:
  #       '204':
  #         description: Certificate deleted
  #       '400':
  #         description: Invalid ID supplied
  #       '401':
  #         $ref: '#/responses/UnauthorizedError'
  #       '404':
  #         description: Certificate not found
  #       '500':
  #         $ref: '#/responses/Default500ErrorResponse'
  
  
  # '/certificates/secure/{secure_token}':
  #   get:
  #     tags:
  #       - certificates
  #     security: []
  #     summary: Get a certificate using a secure token
  #     operationId: get_secure_certificate
  #     parameters:
  #       - in: path
  #         name: secure_token
  #         description: Secure Token
  #         type: string
  #         required: true
  #     responses:
  #       '200':
  #         description: A Secure certificate
  #         schema:
  #           $ref: '#/definitions/Certificate'
  #       '401':
  #         $ref: '#/responses/UnauthorizedError'
  #       '405':
  #         $ref: '#/responses/InvalidInputResponse'
  #       '500':
  #         $ref: '#/responses/Default500ErrorResponse'
  ### End of Courses
  
  ### Webhooks
  /webhooks/sendgrid:
    post:
      tags:
        - webhooks
      security: []
      summary: Sendgrid webhook
      operationId: sengrid_webhook
      responses:
        '200':
          description: Processed webhook
  ### End Webhooks
parameters:
  page_size:
    name: page_size
    in: query
    description: Number of items returned
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: true
    maximum: 50
    exclusiveMaximum: false
    multipleOf: 10
    default: 20
  start_cursor:
    name: start_cursor
    in: query
    description: Start Cursor for query
    type: string
  event_id:
    name: event_id
    in: path
    description: Event Id
    type: string
    required: true
  certificate_id:
    name: certificate_id
    in: path
    description: Certificate Id
    type: string
    required: true
responses:
  Default500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/DefaultError'
  InvalidInputResponse:
    description: Validation exception
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string
definitions:
  # Extendable Models
  BaseId:
    type: object
    properties:
      id:
        type: string
      created:
        type: integer
        format: int32
        readOnly: true
      modified:
        type: integer
        format: int32
        readOnly: true
      version:
        type: string
        readOnly: true
  
  # Creator:
  #   type: object
  #   allOf:
  #     - $ref: '#/definitions/BaseId'
  #     - properties:
  #         creatorId:
  #           type: string
            
  Pagination:
    type: object
    properties:
      pageSize:
        type: integer
        format: int32
      nextCursor:
        type: string
      prevCursor:
        type: string
      total:
        type: integer
        format: int32
      more:
        type: boolean
        default: false
  ### End Extendable Models
  
  ### Components
  # Address:
  #   type: object
  #   properties:
  #     line1:
  #       type: string
  #     line2:
  #       type: string
  #     line3:
  #       type: string
  #     city:
  #       type: string
  #     stateCode:
  #       type: string
  #     state:
  #       type: string
  #     country:
  #       type: string
  #     zip:
  #       type: string
  #     geoloc:
  #       $ref: '#/definitions/Geoloc'
  
  # Geoloc:
  #   type: object
  #   properties:
  #     lat:
  #       type: number
  #       format: float
  #     lng:
  #       type: number
  #       format: float
  
  DefaultError:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  
  ### Permissions
  # PermissionEntity:
  #   type: object
  #   properties:
  #     permissionName:
  #       type: string
  #     startTimestamp:
  #       type: integer
  #     endTimestamp:
  #       type: integer
  #     conditions:
  #       type: object
  #     client:
  #       type: string
  #     creatorId:
  #       type: string
  # Permission:
  #   type: object
  #   properties:
  #     id:
  #       type: string
  #     creatorId:
  #       type: string
  #     entityKind:
  #       type: string
  #     entityId:
  #       type: string
  #     permissions:
  #       type: array
  #       items:
  #         $ref: '#/definitions/PermissionEntity'
  # PermissionInput:
  #   type: object
  #   properties:
  #     accountId:
  #       type: string
  #     accountEmail:
  #       type: string
  #     permissions:
  #       type: array
  #       items:
  #         $ref: '#/definitions/PermissionEntity'
  # PagedPermission:
  #   type: object
  #   properties:
  #     pageData:
  #       $ref: '#/definitions/Pagination'
  #     allPermission:
  #       type: array
  #       items:
  #         type: string
  #     items:
  #       type: array
  #       items:
  #         $ref: '#/definitions/Permission'
  ### End Permissions
  
  ### Search
  # SearchResult:
  #   type: object
  #   properties:
  #     hitsPerPage:
  #       type: integer
  #     nbHits:
  #       type: integer
  #     nbPages:
  #       type: integer
  #     page:
  #       type: integer
  #     params:
  #       type: string
  #     processingTimeMS:
  #       type: integer
  #     query:
  #       type: string
  ### End Search
        
  ## APP CONFIG
  AppConfig:
    type: object
    allOf:
      - $ref: '#/definitions/BaseId'
      - properties:
          appId:
            type: string
          appVersion:
            type: string
          appName:
            type: string
          description:
            type: string
          production:
            type: boolean
            default: True
          baseUrl:
            type: string
          firebaseCredentials:
            type: object
            properties:
              appId:
                type: string
              certPath:
                type: string
              databaseUrl:
                type: string
          sendgridCredentials:
            type: object
            properties:
              apiKey:
                type: string
          algoliaCredentials:
            type: object
            properties:
              appId:
                type: string
              apiKey:
                type: string
              defaultIndex:
                type: string
          sendgridTemplates:
            type: object
          senderEmail:
            type: string
          mailSecret:
            type: string
          senderName:
            type: string
          redirectEmail:
            type: string
          redirectAllEmail:
            type: boolean
          cronTasksEnabled:
            type: boolean
            default: False
          emailEnabled:
            type: boolean
            default: False
  ### End App Config
  
  ### Notifications
  # MailSummary:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #     subject:
  #       type: string
  #     processedWhen:
  #       type: integer
  #     deferredWhen:
  #       type: integer
  #     sentWhen:
  #       type: integer
  #     failedWhen:
  #       type: integer
  #     failedReason:
  #       type: string
  #     deliveredWhen:
  #       type: integer
  #     openedWhen:
  #       type: array
  #       items:
  #         type: integer
  #     clickedWhen:
  #       type: array
  #       items:
  #         type: integer
  #     created:
  #       type: integer
      
  # Mail:
  #   type: object
  #   allOf:
  #     - $ref: '#/definitions/MailSummary'
  #     - properties:
  #         toAccountId:
  #           type: string
  #         toName:
  #           type: string
  #         toEmail:
  #           type: string
  
  # PagedMail:
  #   type: object
  #   properties:
  #     pageData:
  #       $ref: '#/definitions/Pagination'
  #     items:
  #       type: array
  #       items:
  #         $ref: '#/definitions/Mail'
  
  # RetryMail:
  #   type: object
  #   properties:
  #     toEmail:
  #       type: string
  #     toName:
  #       type: string
  
  ### Mail html
  MailHTML:
    type: object
    properties:
      created:
        type: integer
        format: int32
      subject:
        type: string
      html:
        type: string
      subs:
        type: object
  ### End Mail
  
  ### Certificates
  CertificateAttribute:
    type: object
    properties:
      name:
        type: string
      value:
        type: string
      placehoder:
        type: string
      default:
        type: string
  CertificateSummary:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      publicLink:
        type: string
      timestamp:
        type: string
  Certificate:
    type: object
    allOf:
      - $ref: '#/definitions/CertificateSummary'
      - properties:
          text:
            type: string
          link:
            type: string
          templateId:
            type: integer
          autoAttributesMap:
            type: array
            items:
              $ref: '#/definitions/CertificateAttribute'
          constantAttributesMap:
            type: array
            items:
              $ref: '#/definitions/CertificateAttribute'
  PagedCertificate:
    type: object
    properties:
      pageData:
        $ref: '#/definitions/Pagination'
      items:
        type: array
        items:
          $ref: '#/definitions/CertificateSummary'
  ### End Certificates