swagger: '2.0'
info:
  description: Store service for eDropin
  version: 1.0.0
  title: eDropin Store
  license:
    name: UNLICENSED
  contact:
    name: Saj Arora
    email: dev@edropin.com
host: 'store-dot-edropin-playground.appspot.com'
basePath: /v1
tags:
  - name: esMerchants
    description: Merchant management
  - name: esStore
    description: Store management
  - name: esCart
    description: User Cart for store items
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  Authorization:
    type: apiKey
    in: header
    name: Authorization
  ClientKey:
    type: apiKey
    in: header
    name: X-Client-Key
security:
  - ClientKey: []
    Authorization: []
paths:
  ### Merchants
  '/merchants/{profileId}':
    parameters:
      - $ref: '#/parameters/profileId'
    get:
      tags:
        - esMerchants
      summary: Get a Merchant from the directory
      operationId: getMerchant
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - esMerchants
      summary: Upsert a Merchant
      operationId: upsertMerchant
      parameters:
        - in: body
          name: merchantProps
          description: Merchant that needs to be upserted
          required: true
          schema:
            $ref: '#/definitions/EsMerchantUpdate'
      responses:
        '200':
          description: Merchant updated/inserted
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Profile not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{profileId}/stripe':
    parameters:
      - $ref: '#/parameters/profileId'
    put:
      tags:
        - esMerchants
      summary: Link a stripe account to merchant
      operationId: linkMerchantStripAccount
      parameters:
        - in: query
          name: code
          required: true
          description: Stripe Code for OAuth
          type: string
      responses:
        '200':
          description: Merchant stripe account linked
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Profile not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/permissions/{accountId}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/accountId'
    get:
      tags:
        - esMerchants
      summary: Get permission for account
      operationId: getAccountPermissionForMerchant
      responses:
        '200':
          description: Permissions for account
          schema:
            $ref: "#/definitions/EsPermission"
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - esMerchants
      summary: Set permission for merchant
      operationId: setMerchantPermission
      parameters:
        - in: body
          name: permissionProps
          description: Permissions
          required: true
          schema:
            $ref: '#/definitions/EsPermissionInput'
      responses:
        '200':
          description: Permission set
          schema:
            $ref: '#/definitions/EsPermission'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/permissions/{accountId}/check':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/accountId'
    get:
      tags:
        - esMerchants
      summary: Check account has permission
      operationId: checkAccountHasPermission
      parameters:
        - in: query
          type: string
          required: true
          name: permission
      responses:
        '200':
          description: Account has Permission
          schema:
            $ref: '#/definitions/EsPermissionCheck'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/all-permissions':
    parameters:
      - $ref: '#/parameters/merchantId'
    get:
      tags:
        - esMerchants
      summary: List all merchant permissions
      operationId: getMerchantPermission
      parameters:
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: List of Users with permissions linked to this merchant
          schema:
            $ref: '#/definitions/EsPagedPermission'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  ### End of Merchants
  
  ### Store
  '/store/{merchantId}/items/{itemId}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/itemId'
    get:
      tags:
        - esStore
      summary: Get a store item from the directory
      operationId: getStoreItem
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - esStore
      summary: Upsert a store item
      operationId: upsertStoreItem
      parameters:
        - in: body
          name: storeItemProps
          description: Store Item that needs to be upserted
          required: true
          schema:
            $ref: '#/definitions/EsStoreItemUpdate'
      responses:
        '200':
          description: Store Item updated
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      tags:
        - esStore
      summary: Delete an existing Store Item
      operationId: deleteStoreItem
      responses:
        '204':
          description: Event deleted
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: StoreItem not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  ### End of Store
  
  ### Cart
  '/cart':
    get:
      tags:
        - esCart
      summary: Get the users current cart
      operationId: getUserCart
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsCart'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      tags:
        - esCart
      summary: Empty the user cart
      operationId: emptyCart
      responses:
        '204':
          description: Cart deleted
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/cart/upsert/merchants/{merchantId}/items/{itemId}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/itemId'
    put:
      tags:
        - esCart
      summary: Upsert item to cart
      operationId: upsertCartItem
      parameters:
        - in: body
          name: cartItemProps
          description: Cart Item that needs to be upserted
          required: true
          schema:
            $ref: '#/definitions/EsCartItemInput'
      responses:
        '200':
          description: Cart Item upserted
          schema:
            $ref: '#/definitions/EsCart'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart/Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      tags:
        - esCart
      summary: Delete a cart item
      operationId: deleteCartItem
      responses:
        '204':
          description: Cart Item deleted
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/carts/validate':
    post:
      tags:
        - esCart
      summary: Validate Cart to ensure all items are available and pricing is all right
      operationId: validateCart
      responses:
        '200':
          description: Cart Item validated
          schema:
            $ref: '#/definitions/EsCart'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart/Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/carts/checkout':
    post:
      tags:
        - esCart
      summary: Payment information to process all cart items
      parameters:
        - in: body
          name: paymentProps
          description: Payment props for checkout
          required: true
          schema:
            $ref: '#/definitions/EsPaymentInput'
      operationId: checkoutCart
      responses:
        '200':
          description: Order
          schema:
            $ref: '#/definitions/EsOrder'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart/Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
      
  ### End of Cart
  
parameters:
  limit:
    name: limit
    in: query
    description: Number of items returned
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: true
    maximum: 50
    exclusiveMaximum: false
    multipleOf: 10
    default: 20
  cursor:
    name: cursor
    in: query
    description: Start Cursor for query
    type: string
  accountId:
    name: accountId
    in: path
    description: Account Id
    type: string
    required: true
  merchantId:
    name: merchantId
    in: path
    description: Merchant Id
    type: string
    required: true
  profileId:
    name: profileId
    in: path
    description: Profile Id
    type: string
    required: true
  itemId:
    name: itemId
    in: path
    description: Store Item Id
    type: string
    required: true
responses:
  Default500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/EsDefaultError'
  InvalidInputResponse:
    description: Validation exception
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string
definitions:
  # Extendable Models
  EsBaseId:
    type: object
    properties:
      id:
        type: string
      created:
        type: integer
        format: int32
        readOnly: true
      modified:
        type: integer
        format: int32
        readOnly: true
      version:
        type: string
        readOnly: true
  ### End Extendable Models
  
  ### Components
  EsDefaultError:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  
  EsPagination:
    type: object
    properties:
      pageSize:
        type: integer
        format: int32
      nextCursor:
        type: string
      total:
        type: integer
        format: int32
        
  ### Permissions
  EsPermission:
    type: object
    properties:
      id:
        type: string
      creatorId:
        type: string
      entityKind:
        type: string
      entityId:
        type: string
      permissions:
        type: object
  EsPermissionInput:
    type: object
    properties:
      permissions:
        type: object
  EsPagedPermission:
    type: object
    properties:
      pageData:
        $ref: '#/definitions/EsPagination'
      allPermission:
        type: array
        items:
          type: string
      items:
        type: array
        items:
          $ref: '#/definitions/EsPermission'
  EsPermissionCheck:
    type: object
    properties:
      hasPermission:
        type: boolean
  
  ### End Permissions
  
  ### Merchant
  EsMerchantUpdate:
    type: object
    properties:
      name:
        type: string
      picture:
        type: string
      bio:
        type: string
      shortBio:
        type: string
      address:
        type: object
  EsMerchant:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsMerchantUpdate'
      - properties:
          stripeAccountId:
            type: string

  ### Store
  EsStoreItemUpdate:
    type: object
    properties:
      name:
        type: string
      picture:
        type: string
      description:
        type: string
      shortDescription:
        type: string
      link:
        type: string
      price:
        type: integer
      startSale:
        type: integer
      endSale:
        type: integer
      totalInventory:
        type: integer
      itemsRemaining:
        type: integer
      merchantId:
        type: string
      active:
        type: boolean
        default: true
      forceOpen:
        type: boolean
        default: false
      refundPolicy:
        type: object
      onSaleHook:
        type: object
      onRefundHook:
        type: object
        
  EsStoreItem:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsStoreItemUpdate'
      - properties:
          profileRoles:
            type: object
          inventoryLeft:
            type: integer
            
  ### Cart
  EsCart:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          quantity:
            type: integer
          subtotal:
            type: integer
          discountTotal:
            type: integer
          merchants:
            type: array
            items:
              $ref: '#/definitions/EsCartMerchant'
          items:
            type: array
            items:
              $ref: '#/definitions/EsCartItem'
  EsCartMerchant:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          name:
            type: string
          shortBio:
            type: string
          location:
            type: string
          picture:
            type: string
  EsCartItemInput:
    type: object
    properties:
      quantity:
        type: integer
      discountCodes:
        type: array
        items:
          type: string
  EsCartItem:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          merchantId:
            type: string
          name:
            type: string
          picture:
            type: string
          shortDescription:
            type: string
          link:
            type: string
          retailPrice:
            type: integer
          discountPrice:
            type: integer
          quantity:
            type: integer
          subtotal:
            type: integer
          discounts:
            type: array
            items:
              $ref: '#/definitions/EsDiscount'
  EsDiscount:
    type: object
    properties:
      discountCode:
        type: string
      discountPrice:
        type: integer
  
  # Order
  EsOrder:
    type: object
    allOf:
      - $ref: '#/definitions/EsCart'
      - properties:
          paymentKey:
            type: string

  EsPaymentInput:
    type: object
    properties:
      source:
        type: string
      email:
        type: string
      