openapi: 3.0.0
info:
  description: Store service for eDropin
  version: "1.0.11"
  title: eDropin Store
  license:
    name: UNLICENSED
  contact:
    name: Saj Arora
    email: dev@edropin.com
tags:
  - name: esPermissions
    description: Permissions manager
  - name: esMerchants
    description: Merchant management
  - name: esStore
    description: Store management
  - name: esCart
    description: User Cart for store items
  - name: esOrder
    description: Order items for user
  - name: esMerchantOrder
    description: Merchant Order items
  - name: esCustomers
    description: Customers of eDropin
  - name: esMemberships
    description: Memberships managed in eDropin
  - name: esUserMemberships
    description: User memberships managed in eDropin
security:
  - ClientKey: []
    Authorization: []
paths:
  '/permissions/accept-invite/{inviteToken}':
    parameters:
      - in: path
        name: inviteToken
        description: Invite Token
        required: true
        schema:
          type: string
    post:
      tags:
        - esPermissions
      summary: Accept a permission invite
      operationId: acceptPermissionInvite
      parameters:
        - in: query
          name: v
          description: Accept or decline an invite
          schema:
            type: string
            enum:
              - accept
              - decline
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPermissionAccept'
        '404':
          description: Permission invite not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/permissions/{entityType}/{entityId}/send-invite':
    parameters:
      - $ref: '#/components/parameters/entityType'
      - $ref: '#/components/parameters/entityId'
    post:
      tags:
        - esPermissions
      summary: Send a permission invite
      operationId: sendPermissionInvite
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedPermissionInvite'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsPermissionInviteCreate'
        description: Object for permission invite
        required: true
  '/permissions/{entityType}/{entityId}/accounts':
    parameters:
      - $ref: '#/components/parameters/entityType'
      - $ref: '#/components/parameters/entityId'
    get:
      tags:
        - esPermissions
      summary: Get permissions for entity
      operationId: paginatePermissions
      parameters:
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Permissions for account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedPermission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/permissions/{entityType}/{entityId}/accounts/{accountId}':
    parameters:
      - $ref: '#/components/parameters/entityType'
      - $ref: '#/components/parameters/entityId'
      - $ref: '#/components/parameters/accountId'
    get:
      tags:
        - esPermissions
      summary: Check account has permission
      operationId: hasPermission
      parameters:
        - in: query
          required: false
          name: permission
          schema:
            type: string
      responses:
        '200':
          description: Account has Permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPermissionCheck'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    put:
      tags:
        - esPermissions
      summary: Set account permission
      operationId: setPermission
      responses:
        '200':
          description: Set Account Permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPermission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsPermissionInput'
        required: true
    delete:
      tags:
        - esPermissions
      summary: Remove all permissions for account
      operationId: removePermissionsForAccount
      responses:
        '200':
          description: Permissions for account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsSuccess'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/merchants/{merchantId}':
    parameters:
      - $ref: '#/components/parameters/merchantId'
    get:
      tags:
        - esMerchants
      summary: Get a Merchant from the directory
      operationId: getMerchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMerchant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    put:
      tags:
        - esMerchants
      summary: Enable billing
      operationId: enableBilling
      responses:
        '200':
          description: Billing updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Profile not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Stripe Code To Enable Billing
        required: true
  '/merchants/{merchantId}/enable-billing':
    parameters:
      - $ref: '#/components/parameters/merchantId'
    post:
      tags:
        - esMerchants
      summary: Enable billing
      operationId: enableBilling
      responses:
        '200':
          description: Billing updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Profile not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Stripe Code To Enable Billing
        required: true
  '/merchants/{merchantId}/fee-structure/{itemType}':
    parameters:
      - $ref: '#/components/parameters/merchantId'
      - $ref: '#/components/parameters/itemType'
    put:
      tags:
        - esMerchants
      summary: 'Setup fee structure for merchant [Admin Only]'
      operationId: updateFeeStructure
      responses:
        '200':
          description: Merchant fee structure updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Profile not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsFeeStructure'
        description: Fee structure
        required: true
  
  '/store/{merchantId}/items':
    get:
      parameters:
        - $ref: '#/components/parameters/merchantId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      tags:
        - esStore
      summary: Get all store items for merchant
      operationId: listStoreItems
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/store/{merchantId}/items/{itemId}':
    parameters:
      - $ref: '#/components/parameters/merchantId'
      - $ref: '#/components/parameters/itemId'
    get:
      tags:
        - esStore
      security:
        - ClientKey: []
          AuthorizationOptional: []
        - ClientKey: []
          Authorization: []
      parameters:
        - $ref: '#/components/parameters/enhanced'
      summary: Get a store item from the directory
      operationId: getStoreItem
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    put:
      tags:
        - esStore
      summary: Upsert a store item
      operationId: upsertStoreItem
      responses:
        '200':
          description: Store Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Store Item not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsStoreItemUpdate'
        description: Store Item that needs to be upserted
        required: true
    delete:
      tags:
        - esStore
      summary: Delete an existing Store Item
      operationId: deleteStoreItem
      responses:
        '204':
          description: Event deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: StoreItem not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  /store/get-multi:
    get:
      tags:
        - esStore
      security:
        - ClientKey: []
          AuthorizationOptional: []
        - ClientKey: []
          Authorization: []
      parameters:
        - in: query
          name: storeIds
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/enhanced'
      summary: Get multip store items from the directory
      operationId: getMultipleStoreItems
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/cart':
    get:
      tags:
        - esCart
      summary: Get the users active cart for currency code
      operationId: getCart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrder'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    put:
      tags:
        - esCart
      summary: Update the cart
      operationId: updateCart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrder'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsCartUpdate'
        description: Update Cart
        required: true
    delete:
      tags:
        - esCart
      summary: Empty the user cart
      operationId: emptyCart
      responses:
        '204':
          description: Order cleared
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrder'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/cart/items/{merchantId}/{itemId}':
    parameters:
      - $ref: '#/components/parameters/merchantId'
      - $ref: '#/components/parameters/itemId'
    put:
      tags:
        - esCart
      summary: Upsert item to cart
      operationId: addItem
      responses:
        '200':
          description: Cart Item upserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsCartItemChangeResponse'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Cart Store Item not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsCartItemInput'
        description: Cart Item that needs to be upserted
        required: true
    delete:
      tags:
        - esCart
      summary: Delete a cart item
      operationId: removeItem
      responses:
        '204':
          description: Cart Item deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsCartItemChangeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Cart Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/cart/apply-promotion':
    post:
      tags:
        - esCart
      summary: Promotional codes and memberships can be entered here
      operationId: applyPromotion
      responses:
        '200':
          description: Updated Cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsCartItemChangeResponse'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Cart Store Item not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsPromotionInput'
        description: Promotional codes
        required: true
  '/cart/validate':
    post:
      tags:
        - esCart
      summary: >-
        Validate Cart for a currency to ensure all items are available and pricing is all up to date and there are not potential conflicts
      operationId: validate
      responses:
        '200':
          description: Cart Item validated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrder'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Cart Store Item not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/cart/checkout':
    post:
      tags:
        - esCart
      summary: Endpoint to charge the customer for the items in their cart.
      operationId: checkout
      responses:
        '200':
          description: >-
            List of orderItems grouped by merchant as Order that the user has
            checked out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsCheckout'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Cart Store Item not found
        '405':
          $ref: '#/components/responses/InvalidInputResponse'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsPaymentInput'
        description: Payment props for checkout
        required: true
  /orders:
    get:
      tags:
        - esOrder
      summary: Get orders for current user
      parameters:
        - in: query
          name: orderBy
          required: false
          schema:
            type: string
            enum:
              - modified
              - created
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      operationId: listUserOrders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedOrder'
        '400':
          description: Invalid ID supplied
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/orders/{orderId}':
    parameters:
      - $ref: '#/components/parameters/orderId'
    get:
      tags:
        - esOrder
      summary: Get order by id
      security:
        - ClientKey: []
          AuthorizationOptional: []
        - ClientKey: []
          Authorization: []
      operationId: getOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrder'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/orders/{orderId}/items':
    parameters:
      - $ref: '#/components/parameters/orderId'
    get:
      tags:
        - esOrder
      summary: List order items
      operationId: listOrderItems
      parameters:
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedOrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/order-items':
    get:
      tags:
        - esOrder
      summary: List merchant order items
      operationId: listOrderItemsByMerchant
      parameters:
        - $ref: '#/components/parameters/merchantId'
        - in: query
          name: category
          description: Type of store item category e.g. Event
          required: false
          schema:
            type: string
        - in: query
          name: categoryId
          description: 'Category id e.g [Event Id]'
          required: false
          schema:
            type: string
        - in: query
          name: storeItemId
          description: Store item id e.g. EventTicket-ab2333
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedOrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/orders/{orderId}/order-items/{orderItemId}/start-refund':
    parameters:
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/orderItemId'
    post:
      tags:
        - esOrder
      summary: Start the refund process for item
      operationId: startRefundForItem
      responses:
        '200':
          description: Order Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrderItem'
        '400':
          description: Invalid Request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Order Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsRefundRequest'
        description: Refund options
        required: true
  '/merchant-orders/{orderItemId}':
    parameters:
      - $ref: '#/components/parameters/orderItemId'
    get:
      tags:
        - esMerchantOrder
      summary: Get the order item
      operationId: getOrderItemForMerchant
      responses:
        '200':
          description: Order Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrderItem'
        '400':
          description: Invalid Request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Order Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    post:
      tags:
        - esMerchantOrder
      summary: 'Updater order (e.g. refund, charges, cancel items, re-activate item)'
      operationId: updateOrderItem
      responses:
        '200':
          description: Order Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsOrderItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Order Item not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsMerchantOrderUpdate'
        description: Order update options
        required: true
  /customers:
    get:
      tags:
        - esCustomers
      summary: Get the users current customer information
      operationId: getUserCustomer
      parameters:
        - $ref: '#/components/parameters/expand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsCustomer'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    put:
      tags:
        - esCustomers
      summary: Update a customer
      operationId: updateCustomer
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsCustomer'
        '400':
          description: Invalid attributes
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsCustomerInput'
        description: Customer input
        required: true
  /customers/cards:
    get:
      tags:
        - esCustomers
      summary: Retrieve all saved cards for customer
      operationId: listAllCards
      responses:
        '200':
          description: A new Customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/EsCard'
        '400':
          description: Invalid attributes
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/customers/cards/{cardId}':
    parameters:
      - $ref: '#/components/parameters/cardId'
    delete:
      tags:
        - esCustomers
      summary: Remove a card
      operationId: removeCard
      responses:
        '200':
          description: Card removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsSuccess'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  /memberships:
    get:
      tags:
        - esMemberships
      summary: Get Memberships
      operationId: getAllMemberships
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchFacets'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Memberships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedMembership'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    post:
      tags:
        - esMemberships
      summary: Create Membership
      operationId: createMembership
      responses:
        '200':
          description: Membership created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMembership'
        '400':
          $ref: '#/components/responses/InvalidInputResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsMembershipUpdate'
        description: Membership object that needs to be created
        required: true
  '/memberships/{membershipId}':
    parameters:
      - $ref: '#/components/parameters/membershipId'
    get:
      tags:
        - esMemberships
      summary: Get a membership from eDropin
      operationId: getMembership
      responses:
        '200':
          description: Membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMembership'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    put:
      tags:
        - esMemberships
      summary: Update an existing membership
      operationId: updateMembership
      responses:
        '200':
          description: Membership updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMembership'
        '400':
          $ref: '#/components/responses/InvalidInputResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsMembershipUpdate'
        description: Membership object that needs to be updated
        required: true
    delete:
      tags:
        - esMemberships
      summary: Delete an existing membership
      operationId: deleteMembership
      responses:
        '200':
          description: Membership deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsSuccess'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  '/memberships/{membershipId}/members':
    parameters:
      - $ref: '#/components/parameters/membershipId'
    get:
      tags:
        - esMemberships
      summary: Get members for a membership
      operationId: getMembers
      parameters:
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Members belonging to this membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedMember'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    put:
      tags:
        - esMemberships
      summary: Update an existing membership
      operationId: updateMembers
      responses:
        '200':
          description: Membership updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedMember'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsMembersUpdate'
        description: Members that need to be updated/deleted
        required: true
  '/memberships/{membershipId}/members/tasks':
    parameters:
      - $ref: '#/components/parameters/membershipId'
    delete:
      tags:
        - esMemberships
      summary: 'Delete all members in the membership [cloud tasks]'
      security: []
      operationId: deleteMembersTask
      parameters:
        - in: query
          name: apiKey
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Members deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsSuccess'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
  /user-memberships:
    get:
      tags:
        - esUserMemberships
      summary: List current user memberships
      operationId: listUserMemberships
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchFacets'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Customer Memberships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsPagedUserMembership'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
    post:
      tags:
        - esUserMemberships
      summary: Add a membership to a user
      operationId: addUserMembership
      responses:
        '200':
          description: Membership created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsMembership'
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsUserMembershipUpdate'
        description: Membership object to be added
        required: true
  '/user-memberships/{userMembershipId}':
    parameters:
      - $ref: '#/components/parameters/userMembershipId'
    put:
      tags:
        - esUserMemberships
      summary: Update an existing user membership
      operationId: updateUserMembership
      responses:
        '200':
          description: Membership updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsUserMembership'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EsUserMembershipUpdate'
        description: Membership object that needs to be updated
        required: true
    delete:
      tags:
        - esUserMemberships
      summary: Delete an existing membership
      operationId: removeUserMembership
      responses:
        '200':
          description: Membership deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EsSuccess'
        '404':
          description: Membership not found
        '500':
          $ref: '#/components/responses/Default500ErrorResponse'
servers:
  - url: 'https://store-dot-edropin-test.appspot.com/'
  - url: 'https://store-dot-edropinapi.appspot.com/'
  - url: 'https://store-dot-edropin-dev-2.appspot.com/'
  - url: 'http://localhost:9004'
components:
  parameters:
    entityType:
      name: entityType
      in: path
      description: Entity Type
      required: true
      schema:
        type: string
        enum:
          - membership
          - merchant
    entityId:
      name: entityId
      in: path
      description: Entity Id
      required: true
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: Number of items returned
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        exclusiveMinimum: true
        exclusiveMaximum: false
        multipleOf: 10
        default: 20
    cursor:
      name: cursor
      in: query
      description: Start Cursor for query
      schema:
        type: string
    accountId:
      name: accountId
      in: path
      description: Account Id
      required: true
      schema:
        type: string
    cartId:
      name: cartId
      in: path
      description: Cart Id
      required: true
      schema:
        type: string
    enhanced:
      name: enhanced
      in: query
      description: Gives you a more detailed entity but requires admin permissions usually
      required: false
      schema:
        type: boolean
    cardId:
      name: cardId
      in: path
      description: Card Id
      required: true
      schema:
        type: string
    expand:
      in: query
      name: expand
      description: Expands the properties in the array
      required: false
      schema:
        type: array
        items:
          type: string
    membershipId:
      name: membershipId
      in: path
      description: Membership Id
      required: true
      schema:
        type: string
    merchantId:
      name: merchantId
      in: path
      description: Merchant Id
      required: true
      schema:
        type: string
    orderId:
      name: orderId
      in: path
      description: Order Id
      required: true
      schema:
        type: string
    orderItemId:
      name: orderItemId
      in: path
      description: Order Item Id
      required: true
      schema:
        type: string
    itemId:
      name: itemId
      in: path
      description: Store Item Id
      required: true
      schema:
        type: string
    itemType:
      name: itemType
      in: path
      description: Store Item Type
      required: true
      schema:
        type: string
    currencyCode:
      name: currencyCode
      in: path
      description: Currency Code
      required: true
      schema:
        type: string
    searchQuery:
      in: query
      name: q
      schema:
        type: string
    searchFacets:
      in: query
      name: facets
      description: 'e.g JSON.stringify([profiledIds:edropin],[profileIds:agdontario])'
      schema:
        type: string
    userMembershipId:
      name: userMembershipId
      in: path
      description: User membership id
      required: true
      schema:
        type: string
  responses:
    Default500ErrorResponse:
      description: An unexpected error occured.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EsDefaultError'
    InvalidInputResponse:
      description: Validation exception
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  securitySchemes:
    Authorization:
      type: apiKey
      in: header
      name: Authorization
    AuthorizationOptional:
      type: apiKey
      in: header
      name: Authorization
    ClientKey:
      type: apiKey
      in: header
      name: X-Client-Key
  schemas:
    EsBaseId:
      type: object
      properties:
        id:
          type: string
        createdOn:
          type: string
          readOnly: true
        modifiedOn:
          type: string
          readOnly: true
    EsSuccess:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: object
    EsDefaultError:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    EsPagination:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
        nextCursor:
          type: string
        total:
          type: integer
          format: int32
    EsPermissionInviteCreate:
      type: object
      required:
        - emails
        - permissions
      properties:
        invitedByName:
          type: string
        emails:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        message:
          type: string
    EsPermissionInvite:
      type: object
      properties:
        id:
          type: string
        modifiedOn:
          type: string
        creatorId:
          type: string
        entityType:
          type: string
        entityId:
          type: string
        permissions:
          type: object
        email:
          type: string
        message:
          type: string
        acceptedWhen:
          type: integer
        declinedWhen:
          type: integer
        acceptedById:
          type: string
        acceptedByName:
          type: string
    EsPermission:
      type: object
      properties:
        id:
          type: string
        modifiedOn:
          type: string
        creatorId:
          type: string
        entityType:
          type: string
        entityId:
          type: string
        permissions:
          type: object
        email:
          type: string
        name:
          type: string
        picture:
          type: string
        accountId:
          type: string
    EsPermissionInput:
      type: object
      properties:
        permissions:
          type: object
    EsPagedPermissionInvite:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        allPermission:
          type: array
          items:
            type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsPermissionInvite'
    EsPagedPermission:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        allPermission:
          type: array
          items:
            type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsPermission'
    EsPermissionCheck:
      type: object
      properties:
        hasPermission:
          type: boolean
        permission:
          $ref: '#/components/schemas/EsPermission'
    EsPermissionAccept:
      type: object
      properties:
        invite:
          $ref: '#/components/schemas/EsPermissionInvite'
        permission:
          $ref: '#/components/schemas/EsPermission'
    EsStatusMessage:
      type: object
      properties:
        timestamp:
          type: integer
        message:
          type: string
    
    EsFeeStructure:
      type: object
      required:
        - feeType
        - feeAmount
      properties:
        perItem:
          type: boolean
          default: true
        active:
          type: boolean
          default: true
        feeType:
          type: string
          enum:
            - fixed
            - percentage
            - none
        feeMaximum:
          type: integer
        feeMinimum:
          type: integer
          default: 0
        feeAmount:
          type: integer
          default: 0
    EsMerchantInput:
      type: object
      required:
        - name
        - stripeId
        - storeCurrency
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - properties:
            name:
              type: string
            stripeId:
              type: string
            storeCurrency:
              type: string
              enum:
                - cad
                - usd
    EsMerchant:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - $ref: '#/components/schemas/EsMerchantInput'
        - properties:
            feeStructure:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/EsFeeStructure'
    
    EsStoreItemUpdate:
      type: object
      required:
        - name
        - category
        - categoryId
        - itemType
        - totalInventory
        - startSaleTimestamp
        - endSaleTimestamp
        - retailPrice
      properties:
        category:
          type: string
          enum:
            - event
            - membership
        categoryId:
          type: string
        itemType:
          type: string
          enum:
            - EventTicket
            - Membership
        name:
          type: string
        picture:
          type: string
        description:
          type: string
        totalInventory:
          type: integer
          format: int32
        startSaleTimestamp:
          type: integer
        endSaleTimestamp:
          type: integer
        policy:
          type: string
        extra:
          type: object
        status:
          type: string
          enum:
            - open
            - closed
            - soldOut
        retailPrice:
          type: integer
          format: int32
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/EsDiscountInput'
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/EsRefundInput'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/EsFeeInput'
        unlockSecret:
          type: string
        availableCurrencies:
          type: array
          items:
            type: string
            enum:
              - cad
              - usd
    
    EsDiscountInput:
      type: object
      required:
        - discountType
        - discountPrice
        - startTimestamp
        - endTimestamp
      properties:
        discountType:
          type: string
          enum:
            - membership
            - referralCode
            - limitedTime
        discountPrice:
          type: integer
          format: int32
        startTimestamp:
          type: integer
          format: int32
        endTimestamp:
          type: integer
          format: int32
        referralCode:
          type: string
        membershipId:
          type: integer
        membershipName:
          type: string
    EsDiscount:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsDiscountInput'
        
    EsRefundInput:
      type: object
      required:
        - refundType
        - feeAmount
      properties:
        short:
          type: string
        refundType:
          type: string
          enum:
            - cancellation
            - return
        startTimestamp:
          type: integer
          minimum: 0
          default: 0
        endTimestamp:
          type: integer
          minimum: 0
          default: 0
        validAfterPurchaseUntil:
          type: integer
          minimum: 0
          default: 0
        feeAmount:
          type: integer
          minimum: 0
          default: 0
        isDifferenceCharged:
          type: boolean
          default: false
    EsRefund:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsRefundInput'
        
    EsFeeInput:
      type: object
      properties:
        short:
          type: string
        feeAmount:
          type: integer
          minimum: 0
    EsFee:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsFeeInput'
    
    EsStoreItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - $ref: '#/components/schemas/EsStoreItemUpdate'
        - properties:
            merchantId:
              type: string
            merchantName:
              type: string
            totalSold:
              type: integer
              format: int32
            discounts:
              type: array
              items:
                $ref: '#/components/schemas/EsDiscount'
            refunds:
              type: array
              items:
                $ref: '#/components/schemas/EsRefund'
            fees:
              type: array
              items:
                $ref: '#/components/schemas/EsFee'
            
    EsPagedStoreItem:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsStoreItem'
    
    EsCartItemChangeResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: object
        order:
          $ref: '#/components/schemas/EsOrder'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/EsOrderItem'
    
    
    EsMerchantInvoice:
      type: object
      
    EsCartUpdate:
      type: object
      properties:
        currencyCode:
          type: string
          enum:
            - cad
            - usd
    
    EsOrderUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
            
    EsOrder:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - properties:
            ownerId:
              type: string
            currencyCode:
              type: string
            checkedOutWhen:
              type: integer
            isCheckedOut:
              type: boolean
              default: false
            subtotal:
              type: integer
              minimum: 0
              default: 0
            quantityTotal:
              type: integer
              minimum: 0
              default: 0
            quantityAvailable:
              type: integer
              minimum: 0
              default: 0
            validatedWhen:
              type: integer
              minimum: 0
              default: 0
            customerId:
              type: string
            stripeFee:
              type: integer
              minimum: 0
              default: 0
            platformFee:
              type: integer
              minimum: 0
              default: 0
            merchantInvoices:
              type: array
              items:
                $ref: '#/components/schemas/EsMerchantInvoice'
            refundTotal:
              type: integer
              default: 0
            isRefunded:
              type: boolean
            user:
              $ref: '#/components/schemas/EsOrderUser'
            orderItemIds:
              type: array
              items:
                type: string
            orderItems:
              type: array
              items:
                $ref: '#/components/schemas/EsOrderItem'
            statusMessages:
              type: array
              items:
                $ref: '#/components/schemas/EsStatusMessage'
            claimCode:
              type: string
    
    EsCartItemInput:
      type: object
      properties:
        quantity:
          type: integer
    
    EsAppliedPromotion:
      type: object
      properties:
        discountType:
          type: string
        discountPrice:
          type: integer
        timestamp:
          type: integer
        referralCode:
          type: string
        membershipId:
          type: integer
        membershipName:
          type: string
        memberId:
          type: string
    
    EsPromotionInput:
      type: object
      properties:
        referralCode:
          type: string
        membershipId:
          type: integer
        memberId:
          type: string
    
    EsPaymentInput:
      type: object
      required:
        - email
        - name
      properties:
        source:
          type: string
        email:
          type: string
        name:
          type: string
        paymentMethodId:
          type: string
    
    EsOrderItemStatus:
      type: object
      properties:
        id:
          type: string
        active:
          type: boolean
          default: true
        isRefunded:
          type: boolean
          default: false
        refundId:
          type: string
    
    EsOrderItemRefund:
      type: object
      properties:
        id:
          type: string
        amount:
          type: integer
        charge:
          type: string
        created:
          type: integer
        currency:
          type: string
        reason:
          type: string
        status:
          type: string
        usedRefundPolicy:
          $ref: '#/components/schemas/EsRefund'
    
    EsOrderItemCharge:
      type: object
      properties:
        id:
          type: string
        amount:
          type: integer
          minimum: 0
        created:
          type: integer
        paid:
          type: boolean
        stripeFee:
          type: integer
          minimum: 0
    
    EsOrderItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - properties:
            orderId:
              type: string
            order:
              $ref: '#/components/schemas/EsOrder'
            checkedOutWhen:
              type: integer
            storeItemId:
              type: string
            storeItem:
              $ref: '#/components/schemas/EsStoreItem'
            chargeId:
              type: string
            stripeFee:
              type: integer
            customerId:
              type: string
            feeId:
              type: string
            currencyCode:
              type: string
            name:
              type: string
            itemType:
              type: string
            category:
              type: string
            categoryId:
              type: string
            description:
              type: string
            picture:
              type: string
            retailPrice:
              type: integer
            salePrice:
              type: integer
            appliedPromotion:
              $ref: '#/components/schemas/EsAppliedPromotion'
    
            user:
              $ref: '#/components/schemas/EsOrderUser'
            statusMessages:
              type: array
              items:
                $ref: '#/components/schemas/EsStatusMessage'
            merchantId:
              type: string
            merchantName:
              type: string
            quantityTotal:
              type: integer
              default: 0
              minimum: 0
            quantityAvailable:
              type: integer
              default: 0
              minimum: 0
            platformFee:
              type: integer
              default: 0
              minimum: 0
            processingRefundFee:
              type: integer
            subtotal:
              type: integer
              default: 0
              minimum: 0
            policy:
              type: string
            itemStatus:
              type: array
              items:
                $ref: '#/components/schemas/EsOrderItemStatus'
            issuedRefunds:
              type: array
              items:
                $ref: '#/components/schemas/EsOrderItemRefund'
            issuedCharges:
              type: array
              items:
                $ref: '#/components/schemas/EsOrderItemCharge'
            refunds:
              type: array
              items:
                $ref: '#/components/schemas/EsRefund'
            refundTotal:
              type: integer
              description: Total amount of money refunded for this order item
            
    EsPagedOrderItem:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsOrderItem'
    
    EsPagedOrder:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsOrder'
    
    EsCustomerInput:
      type: object
      required:
        - defaultCurrency
      properties:
        defaultCurrency:
          type: string
          enum:
            - cad
            - usd
        lastCurrency:
          type: string
          enum:
            - cad
            - usd
        defaultPaymentId:
          type: string
        name:
          type: string
        email:
          type: string
    
    EsCustomer:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - $ref: '#/components/schemas/EsCustomerInput'
        - properties:
            savedCards:
              type: array
              items:
                $ref: '#/components/schemas/EsCard'
    EsCheckout:
      type: object
      properties:
        success:
          type: boolean
        order:
          $ref: '#/components/schemas/EsOrder'
        error:
          $ref: '#/components/schemas/EsDefaultError'
        claimCode:
          type: string
    
    EsRefundRequest:
      type: object
      required:
        - quantity
        - reason
        - feeAmount
      properties:
        quantity:
          type: integer
        reason:
          type: string
          enum:
            - requested_by_customer
            - duplicate
            - fraudulent
        agreedDeduction:
          type: integer
        message:
          type: string
    EsMerchantOrderUpdate:
      type: object
      properties:
        cancelStatusIds:
          type: array
          items:
            type: string
        reason:
          type: string
        amount:
          type: integer
          minimum: 0
        isCharge:
          type: boolean
          default: false
          
    EsCard:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        brand:
          type: string
        country:
          type: string
        last4:
          type: string
        expiryMonth:
          type: integer
        expiryYear:
          type: integer
    EsUserMembershipUpdate:
      type: object
      required:
        - membershipId
        - membershipName
        - memberId
      properties:
        membershipId:
          type: integer
        membershipName:
          type: string
        memberId:
          type: string
    EsUserMembership:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - $ref: '#/components/schemas/EsUserMembershipUpdate'
        - properties:
            id:
              type: string
            membershipId:
              type: integer
            membershipName:
              type: string
            memberId:
              type: string
    EsPagedUserMembership:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        facets:
          type: object
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsUserMembership'
    EsMembershipUpdate:
      type: object
      required:
        - name
        - agreeTerms
        - organizerId
      properties:
        name:
          type: string
        organizerId:
          type: string
        description:
          type: string
        agreeTerms:
          type: string
          enum:
            - v1
    EsMembership:
      type: object
      allOf:
        - $ref: '#/components/schemas/EsBaseId'
        - $ref: '#/components/schemas/EsMembershipUpdate'
        - properties:
            totalMembers:
              type: integer
            totalActiveMembers:
              type: integer
    EsPagedMembership:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        facets:
          type: object
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsMembership'
    EsMember:
      type: object
      properties:
        id:
          type: string
        memberId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        title:
          type: string
        name:
          type: string
        email:
          type: string
        active:
          type: boolean
          default: true
        memberSince:
          type: number
    EsMembersUpdate:
      type: object
      required:
        - members
      properties:
        members:
          type: array
          items:
            type: object
            required:
              - action
              - memberId
            allOf:
              - $ref: '#/components/schemas/EsMember'
              - properties:
                  action:
                    type: string
                    enum:
                      - delete
                      - update
                    default: update
    EsPagedMember:
      type: object
      properties:
        pageData:
          $ref: '#/components/schemas/EsPagination'
        items:
          type: array
          items:
            $ref: '#/components/schemas/EsMember'
        deleted:
          type: array
          items:
            type: string