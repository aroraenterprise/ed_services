swagger: '2.0'
info:
  contact:
    email: dev@edropin.com
    name: Saj Arora
  description: Store service for eDropin
  license:
    name: UNLICENSED
  title: eDropin Store
  version: 1.0.11
host: localhost:9004
basePath: /
schemes:
  - http
paths:
  ### PERMISSIONS
  '/permissions/accept-invite/{inviteToken}':
    parameters:
      - description: Invite Token
        in: path
        name: inviteToken
        required: true
        type: string
    post:
      produces:
        - application/json
      parameters:
        - description: Accept or decline an invite
          enum:
            - accept
            - decline
          in: query
          name: v
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPermissionAccept'
        '404':
          description: Permission invite not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esPermissions
      operationId: acceptPermissionInvite
      summary: Accept a permission invite
  '/permissions/{entityType}/{entityId}/accounts':
    parameters:
      - $ref: '#/parameters/entityType'
      - $ref: '#/parameters/entityId'
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Permissions for account
          schema:
            $ref: '#/definitions/EsPagedPermission'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esPermissions
      operationId: paginatePermissions
      summary: Get permissions for entity
  '/permissions/{entityType}/{entityId}/accounts/{accountId}':
    parameters:
      - $ref: '#/parameters/entityType'
      - $ref: '#/parameters/entityId'
      - $ref: '#/parameters/accountId'
    delete:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Permissions for account
          schema:
            $ref: '#/definitions/EsSuccess'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esPermissions
      operationId: removePermissionsForAccount
      summary: Remove all permissions for account
    get:
      produces:
        - application/json
      parameters:
        - in: query
          name: permission
          required: false
          type: string
      responses:
        '200':
          description: Account has Permission
          schema:
            $ref: '#/definitions/EsPermissionCheck'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esPermissions
      operationId: hasPermission
      summary: Check account has permission
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsPermissionInput'
      responses:
        '200':
          description: Set Account Permission
          schema:
            $ref: '#/definitions/EsPermission'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esPermissions
      operationId: setPermission
      summary: Set account permission
  '/permissions/{entityType}/{entityId}/send-invite':
    parameters:
      - $ref: '#/parameters/entityType'
      - $ref: '#/parameters/entityId'
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Object for permission invite
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsPermissionInviteCreate'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedPermissionInvite'
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esPermissions
      operationId: sendPermissionInvite
      summary: Send a permission invite
  ### PERMISSIONS END
  
  ### CURRENCY EXCHANGE
  /currency-exchange:
     get:
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsExchange'
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCurrencyExchange
      operationId: getLatestExchange
      summary: Get the latest exchange rates data
  ### CURRENCY EXCHANGE END
  
  /cart:
    delete:
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Order cleared
          schema:
            $ref: '#/definitions/EsOrder'
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCart
      operationId: emptyCart
      summary: Empty the user cart
    post:
      produces:
        - application/json
      parameters:
        - description: Cart body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsCartInput'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsCart'
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCart
      operationId: updateCart
      summary: Update the cart
  /cart/apply-promotion:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Promotional codes
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsPromotionInput'
      responses:
        '200':
          description: Updated Cart
          schema:
            $ref: '#/definitions/EsCartChangeResponse'
        '400':
          description: Invalid ID supplied
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Cart Store Item not found
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCart
      operationId: applyPromotion
      summary: Promotional codes and memberships can be entered here
  /cart/checkout:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Payment props for checkout
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsPaymentInput'
      responses:
        '200':
          description: >-
            List of orderItems grouped by merchant as Order that the user has
            checked out
          schema:
            $ref: '#/definitions/EsCartChangeResponse'
        '400':
          description: Invalid ID supplied
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Cart Store Item not found
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCart
      operationId: checkout
      summary: Endpoint to charge the customer for the items in their cart.
  '/cart/remove-item/{itemId}':
    parameters:
      - $ref: '#/parameters/itemId'
    post:
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Cart Item deleted
          schema:
            $ref: '#/definitions/EsCartChangeResponse'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Cart Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCart
      operationId: removeItem
      summary: Delete a cart item
  
  '/cart/add-item/{itemId}':
    parameters:
      - $ref: '#/parameters/itemId'
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Cart Item that needs to be upserted
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsCartItemInput'
      responses:
        '200':
          description: Cart Item upserted
          schema:
            $ref: '#/definitions/EsCartChangeResponse'
        '400':
          description: Invalid ID supplied
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Cart Store Item not found
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCart
      operationId: addItem
      summary: Upsert item to cart
  /cart/validate:
    post:
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/EsValidationInput'
      responses:
        '200':
          description: Cart Item validated
          schema:
            $ref: '#/definitions/EsOrder'
        '400':
          description: Invalid ID supplied
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Cart Store Item not found
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCart
      operationId: validate
      summary: >-
        Validate Cart for a currency to ensure all items are available and
        pricing is all up to date and there are not potential conflicts
  /customers:
    get:
      produces:
        - application/json
      parameters:
        - collectionFormat: multi
          description: Expands the properties in the array
          in: query
          items:
            type: string
          name: expand
          required: false
          type: array
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsCustomer'
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCustomers
      operationId: getUserCustomer
      summary: Get the users current customer information
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Customer input
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsCustomerInput'
      responses:
        '200':
          description: Customer updated
          schema:
            $ref: '#/definitions/EsCustomer'
        '400':
          description: Invalid attributes
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCustomers
      operationId: updateCustomer
      summary: Update a customer
  /customers/cards:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: A new Customer
          schema:
            properties:
              items:
                items:
                  $ref: '#/definitions/EsCard'
                type: array
            type: object
        '400':
          description: Invalid attributes
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCustomers
      operationId: listAllCards
      summary: Retrieve all saved cards for customer
  '/customers/cards/{cardId}':
    parameters:
      - $ref: '#/parameters/cardId'
    delete:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Card removed
          schema:
            $ref: '#/definitions/EsSuccess'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esCustomers
      operationId: removeCard
      summary: Remove a card
  /memberships:
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/searchQuery'
        - $ref: '#/parameters/searchFacets'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Memberships
          schema:
            $ref: '#/definitions/EsPagedMembership'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMemberships
      operationId: getAllMemberships
      summary: Get Memberships
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Membership object that needs to be created
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsMembershipUpdate'
      responses:
        '200':
          description: Membership created
          schema:
            $ref: '#/definitions/EsMembership'
        '400':
          description: Validation exception
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMemberships
      operationId: createMembership
      summary: Create Membership
  '/memberships/{membershipId}':
    parameters:
      - $ref: '#/parameters/membershipId'
    delete:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Membership deleted
          schema:
            $ref: '#/definitions/EsSuccess'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMemberships
      operationId: deleteMembership
      summary: Delete an existing membership
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Membership
          schema:
            $ref: '#/definitions/EsMembership'
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMemberships
      operationId: getMembership
      summary: Get a membership from eDropin
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Membership object that needs to be updated
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsMembershipUpdate'
      responses:
        '200':
          description: Membership updated
          schema:
            $ref: '#/definitions/EsMembership'
        '400':
          description: Validation exception
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMemberships
      operationId: updateMembership
      summary: Update an existing membership
  '/memberships/{membershipId}/members':
    parameters:
      - description: Membership Id
        in: path
        name: membershipId
        required: true
        type: string
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Members belonging to this membership
          schema:
            $ref: '#/definitions/EsPagedMember'
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMemberships
      operationId: getMembers
      summary: Get members for a membership
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Members that need to be updated/deleted
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsMembersUpdate'
      responses:
        '200':
          description: Membership updated
          schema:
            $ref: '#/definitions/EsPagedMember'
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMemberships
      operationId: updateMembers
      summary: Update an existing membership
  '/memberships/{membershipId}/members/tasks':
    parameters:
      - $ref: '#/parameters/membershipId'
    delete:
      produces:
        - application/json
      parameters:
        - in: query
          name: apiKey
          required: true
          type: string
      responses:
        '200':
          description: Members deleted
          schema:
            $ref: '#/definitions/EsSuccess'
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      security: []
      tags:
        - esMemberships
      operationId: deleteMembersTask
      summary: 'Delete all members in the membership [cloud tasks]'
  
  '/order-items':
    get:
      produces:
        - application/json
      parameters:
        - in: query
          name: merchantId
          required: true
          type: string
        - $ref: '#/parameters/searchQuery'
        - $ref: '#/parameters/searchFacets'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedOrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esOrderItems
      operationId: listOrderItemsByMerchant
      summary: List merchant order items
  '/order-items/{orderItemId}':
    parameters:
      - $ref: '#/parameters/orderItemId'
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Order Item
          schema:
            $ref: '#/definitions/EsOrderItem'
        '400':
          description: Invalid Request
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Order Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esOrderItems
      operationId: getOrderItem
      summary: Get the order item
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Order update options
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsMerchantOrderUpdate'
      responses:
        '200':
          description: Order Item
          schema:
            $ref: '#/definitions/EsOrderItem'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Order Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esOrderItems
      operationId: updateOrderItem
      summary: 'Updater order (e.g. refund, charges, cancel items, re-activate item)'
  '/order-items/{orderItemId}/refunds':
    parameters:
      - $ref: '#/parameters/orderItemId'
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Refund body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsRefundRequest'
      responses:
        '200':
          description: Order Item
          schema:
            $ref: '#/definitions/EsOrderItem'
        '400':
          description: Invalid Request
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Order Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esOrderItems
      operationId: createRefund
      summary: Create a refund for an item
  '/merchants/{merchantId}':
    parameters:
      - $ref: '#/parameters/merchantId'
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMerchants
      operationId: getMerchant
      summary: Get a Merchant from the directory
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Update merchant
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsMerchantUpdate'
      responses:
        '200':
          description: Merchant Updated
          schema:
            $ref: '#/definitions/EsMerchant'
        '404':
          description: Profile not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMerchants
      operationId: updateMerchant
      summary: Update Merchant
  '/merchants/{merchantId}/enable-billing':
    parameters:
      - $ref: '#/parameters/merchantId'
    post:
      consumes:
        - text/plain
      produces:
        - application/json
      parameters:
        - description: Stripe Code To Enable Billing
          in: body
          name: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Billing updated
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Profile not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMerchants
      operationId: enableBilling
      summary: Enable billing
  '/merchants/{merchantId}/fee-structure/{itemType}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/itemType'
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Fee structure
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsFeeStructure'
      responses:
        '200':
          description: Merchant fee structure updated
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Profile not found
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esMerchants
      operationId: updateFeeStructure
      summary: 'Setup fee structure for merchant [Admin Only]'
  /merchants/{merchantId}/feed:
    get:
      tags:
        - esMerchants
      summary: Merchant Feed
      operationId: listMerchantFeed
      parameters:
        - $ref: '#/parameters/merchantId'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Paged Feed Items
          schema:
            $ref: '#/definitions/EsPagedFeedItem'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  
  ### ORDERS
  /orders:
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/searchQuery'
        - $ref: '#/parameters/searchFacets'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedOrder'
        '400':
          description: Invalid ID supplied
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esOrder
      operationId: listUserOrders
      summary: Get orders for current user
  '/orders/{orderId}':
    parameters:
      - $ref: '#/parameters/orderId'
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsOrder'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      security:
        - AuthorizationOptional: []
          ClientKey: []
        - Authorization: []
          ClientKey: []
      tags:
        - esOrder
      operationId: getOrder
      summary: Get order by id
  '/orders/{orderId}/items':
    parameters:
      - $ref: '#/parameters/orderId'
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedOrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esOrder
      operationId: listOrderItems
      summary: List order items
  ### END ORDERS
  
  /store/get-multi:
    get:
      produces:
        - application/json
      parameters:
        - collectionFormat: multi
          in: query
          items:
            type: string
          name: storeIds
          type: array
        - $ref: '#/parameters/expand'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      security:
        - AuthorizationOptional: []
          ClientKey: []
        - Authorization: []
          ClientKey: []
      tags:
        - esStore
      operationId: getMultipleStoreItems
      summary: Get multiple store items from the directory
  '/store':
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/searchQuery'
        - $ref: '#/parameters/searchFacets'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esStore
      operationId: listStoreItems
      summary: Get all store items for merchant
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Store Item that needs to be created
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsStoreItemCreate'
      responses:
        '200':
          description: Store Item updated
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Store Item not found
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esStore
      operationId: createStoreItem
      summary: Create a store item
  '/store/{itemId}':
    parameters:
      - $ref: '#/parameters/itemId'
    delete:
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Store Item deleted
          schema:
            $ref: '#/definitions/EsStoreItem'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: StoreItem not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esStore
      operationId: deleteStoreItem
      summary: Delete an existing Store Item
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/expand'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      security:
        - AuthorizationOptional: []
          ClientKey: []
        - Authorization: []
          ClientKey: []
      tags:
        - esStore
      operationId: getStoreItem
      summary: Get a store item from the directory
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Store Item that needs to be updated
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsStoreItemUpdate'
      responses:
        '200':
          description: Store Item updated
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '404':
          description: Store Item not found
        '405':
          description: Validation exception
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esStore
      operationId: updateStoreItem
      summary: Update a store item
  /user-memberships:
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/searchQuery'
        - $ref: '#/parameters/searchFacets'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Customer Memberships
          schema:
            $ref: '#/definitions/EsPagedUserMembership'
        '401':
          description: API key is missing or invalid
          headers:
            WWW_Authenticate:
              type: string
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esUserMemberships
      operationId: listUserMemberships
      summary: List current user memberships
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Membership object to be added
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsUserMembershipUpdate'
      responses:
        '200':
          description: Membership created
          schema:
            $ref: '#/definitions/EsMembership'
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esUserMemberships
      operationId: addUserMembership
      summary: Add a membership to a user
  '/user-memberships/{userMembershipId}':
    parameters:
      - $ref: '#/parameters/userMembershipId'
    delete:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Membership deleted
          schema:
            $ref: '#/definitions/EsSuccess'
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esUserMemberships
      operationId: removeUserMembership
      summary: Delete an existing membership
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Membership object that needs to be updated
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EsUserMembershipUpdate'
      responses:
        '200':
          description: Membership updated
          schema:
            $ref: '#/definitions/EsUserMembership'
        '404':
          description: Membership not found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/EsDefaultError'
      tags:
        - esUserMemberships
      operationId: updateUserMembership
      summary: Update an existing user membership

definitions:
  EsBaseId:
    properties:
      createdOn:
        readOnly: true
        type: string
      id:
        type: string
      modifiedOn:
        readOnly: true
        type: string
    type: object
  EsCard:
    properties:
      brand:
        type: string
      country:
        type: string
      email:
        type: string
      expiryMonth:
        type: integer
      expiryYear:
        type: integer
      id:
        type: string
      last4:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      name:
        type: string
    type: object
  EsCartChangeResponse:
    properties:
      cart:
        $ref: '#/definitions/EsCart'
      success:
        type: boolean
      errorMsg:
        type: string
      errorStatus:
        type: number
        format: integer
      claimCode:
        type: string
      order:
        $ref: '#/definitions/EsOrder'
    type: object
  EsCartItemInput:
    properties:
      quantity:
        type: integer
      secret:
        type: string
      installmentPlan:
        $ref: '#/definitions/EsInstallmentPlanInput'
      removePlan:
        type: boolean
        default: false
    type: object
  EsInstallmentPlanInput:
    type: object
    properties:
      interval:
        type: string
        enum:
          - week
          - month
          - year
      intervalCount:
        type: integer
        minimum: 1
        default: 1
      billingCycleAnchorTimestamp:
        type: integer
        minimum: 0
      payByTimestamp:
        type: integer
        minimum: 0
  EsInstallmentPlan:
    type: object
    allOf:
      - $ref: '#/definitions/EsInstallmentPlanInput'
      - properties:
          isInstallment:
            type: boolean
          amount:
            type: integer
            minimum: 0
          totalNumberOfPayments:
            type: integer
            minimum: 0
          deposit:
            type: integer
            minimum: 0
  EsCustomer:
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsCustomerInput'
      - properties:
          locationBasedCurrency:
            type: string
          defaultPaymentMethod:
            $ref: '#/definitions/EsCard'
          paymentMethods:
            type: array
            items:
              $ref: '#/definitions/EsCard'
          isCurrencySetByUser:
            type: boolean
          lastIp:
            type: string
          isAnonymous:
            type: string
    type: object
  EsCustomerInput:
    properties:
      currency:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      defaultPaymentMethodId:
        type: string
    required:
      - defaultCurrency
    type: object
  EsDefaultError:
    properties:
      code:
        format: int32
        type: integer
      message:
        type: string
    required:
      - code
      - message
  EsDiscount:
    allOf:
      - $ref: '#/definitions/EsDiscountInput'
    type: object
  EsDiscountInput:
    properties:
      discountByAmount:
        format: int32
        type: integer
        minimum: 0
      discountByPercentage:
        type: number
        minimum: 0
        maximum: 1
      discountType:
        enum:
          - Membership
          - Referral Code
          - Limited Time
        type: string
      endTimestamp:
        format: int32
        type: integer
      membershipId:
        type: integer
      membershipName:
        type: string
      referralCode:
        type: string
      startTimestamp:
        format: int32
        type: integer
      isStackable:
        type: boolean
        default: false
      minimumSalePrice:
        type: integer
        minimum: 0
    required:
      - discountType
      - startTimestamp
      - endTimestamp
    type: object
  EsFeeStructure:
    properties:
      active:
        default: true
        type: boolean
      feeAmount:
        default: 0
        type: integer
      feeMaximum:
        type: integer
      feeMinimum:
        default: 0
        type: integer
      feeType:
        enum:
          - fixed
          - percentage
          - none
        type: string
      perItem:
        default: true
        type: boolean
    required:
      - feeType
      - feeAmount
    type: object
  EsMember:
    properties:
      id:
        type: string
      active:
        default: true
        type: boolean
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      memberId:
        type: string
      memberSince:
        type: number
      name:
        type: string
      title:
        type: string
      group:
        type: array
        items:
          type: string
    type: object
  EsMembersUpdate:
    properties:
      members:
        items:
          allOf:
            - $ref: '#/definitions/EsMember'
            - properties:
                action:
                  default: update
                  enum:
                    - delete
                    - update
                  type: string
          required:
            - action
            - memberId
          type: object
        type: array
    required:
      - members
    type: object
  EsMembership:
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsMembershipUpdate'
      - properties:
          totalActiveMembers:
            type: integer
          totalMembers:
            type: integer
    type: object
  EsMembershipUpdate:
    properties:
      agreeTerms:
        enum:
          - v1
        type: string
      description:
        type: string
      name:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      organizerId:
        type: string
    required:
      - name
      - agreeTerms
      - organizerId
    type: object
  EsMerchant:
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsMerchantUpdate'
      - properties:
          name:
            type: string
          feeStructure:
            additionalProperties:
              $ref: '#/definitions/EsFeeStructure'
            type: object
          stripeId:
            type: string
    type: object
  EsMerchantUpdate:
    properties:
      storeCurrency:
        type: string
      availableCurrencies:
        type: array
        items:
          type: string
      currencyRounding:
        type: object
        additionalProperties:
          type: string
    required:
      - name
      - storeCurrency
    type: object
  EsMerchantOrderUpdate:
    properties:
      amount:
        minimum: 0
        type: integer
      cancelStatusIds:
        items:
          type: string
        type: array
      isCharge:
        default: false
        type: boolean
      transactionId:
        type: string
      reason:
        type: string
    type: object
  EsCartInput:
    type: object
    properties:
      currency:
        type: string
      transferCode:
        type: string
  EsCart:
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          creatorId:
            type: string
          checkoutCurrency:
            type: string
          customerId:
            type: string
          items:
            type: object
            additionalProperties:
              $ref: '#/definitions/EsCartItem'
          orderItems:
            items:
              $ref: '#/definitions/EsOrderItem'
            type: array
          itemQuantity:
            default: 0
            minimum: 0
            type: integer
          subtotal:
            default: 0
            minimum: 0
            type: integer
          dueUpfront:
            type: integer
            default: 0
            minimum: 0
          appliedPromotions:
            type: array
            items:
              $ref: '#/definitions/EsCartPromotion'
          user:
            $ref: '#/definitions/EsOrderUser'
          valid:
            default: false
            type: boolean
          validUntil:
            default: 0
            minimum: 0
            type: integer
          validMemberships:
            additionalProperties:
              $ref: '#/definitions/EsCartMembership'
            type: object
          surveyResponses:
            type: array
            items:
              $ref: '#/definitions/EsCartSurveyResponse'
          transferCode:
            type: string
    type: object
  
  EsCartSurveyResponse:
    type: object
    properties:
      service: 
        type: string
      surveyId: 
        type: string
      orderItemId: 
        type: string
      responseId: 
        type: string
      itemId: 
        type: string
  
  EsCartItem:
    type: object
    properties:
      id:
        type: string
      quantity:
        type: integer
        minimum: 0
      secret:
        type: string
      installmentPlan:
        $ref: '#/definitions/EsInstallmentPlan'
      valid:
        type: boolean
        default: true
      errors:
        type: array
        items:
          type: string
            
  
  EsCartPromotion:
    type: object
    properties:
      memberId:
        type: string
      membershipId:
        type: integer
      membershipName:
        type: string
      referralCode:
        type: string
  
  EsCartMembership:
    type: object
    properties:
      membershipName:
        type: string
    
  EsOrder:
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          isCheckedOut:
            type: boolean
          checkedOutWhen:
            type: integer
          isProcessing:
            type: boolean
          processingStartedWhen:
            type: integer
            minimum: 0
          isFailed:
            type: boolean
          failedWhen:
            type: integer
            minimum: 0
          checkoutCurrency:
            type: string
          customerId:
            type: string
          orderItemIds:
            items:
              type: string
            type: array
          orderItems:
            items:
              $ref: '#/definitions/EsOrderItem'
            type: array
          ownerId:
            type: string
          itemQuantityAvailable:
            default: 0
            minimum: 0
            type: integer
          itemQuantity:
            default: 0
            minimum: 0
            type: integer
          subtotal:
            default: 0
            minimum: 0
            type: integer
          refundTotal:
            default: 0
            type: integer
          platformFeeTotal:
            default: 0
            minimum: 0
            type: integer
          user:
            $ref: '#/definitions/EsOrderUser'
    type: object
  EsOrderItem:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          merchantId:
            type: string
          merchantName:
            type: string
          itemType:
            type: string
          category:
            type: string
          categoryId:
            type: string
          name:
            type: string
          shortName:
            type: string
          picture:
            type: string
          link:
            type: string
          description:
            type: string
          policy:
            type: string
          storeItemId:
            type: string
          orderId:
            type: string
          checkedOutWhen:
            type: integer
          storeCurrency:
            type: string
          presentmentCurrency:
            type: string
          appliedPromotions:
            type: array
            items:
              $ref: '#/definitions/EsOrderItemPromotion'
          itemQuantity:
            type: integer
            minimum: 0
            default: 0
          itemQuantityAvailable:
            type: integer
            minimum: 0
            default: 0
          customerId:
            type: string
          items:
            items:
              $ref: '#/definitions/EsOrderItemStatus'
            type: array
          payInInstallments:
            type: boolean
          installmentPlan:
            $ref: '#/definitions/EsInstallmentPlan'
          retailPrice:
            type: integer
            minimum: 0
            default: 0
          salePrice:
            type: integer
            minimum: 0
            default: 0
          subtotal:
            default: 0
            minimum: 0
            type: integer
          chargeTotal:
            default: 0
            minimum: 0
            type: integer
          refundTotal:
            default: 0
            minimum: 0
            type: integer
          feeTotal:
            default: 0
            minimum: 0
            type: integer
          platformFeeTotal:
            default: 0
            minimum: 0
            type: integer
          paymentProcessorFeeTotal:
            default: 0
            minimum: 0
            type: integer
          numberOfPaymentsMade:
            minimum: 0
            type: integer
          totalNumberOfPayments:
            minimum: 0
            type: integer
          transactions:
            type: object
            additionalProperties:
              $ref: '#/definitions/EsTransaction'
          subscription:
            $ref: '#/definitions/EsSubscription'
          exchangeRates:
            type: object
            additionalProperties:
              $ref: '#/definitions/EsExchangeRate'
          exchange:
            $ref: '#/definitions/EsTransactionExchange'
          user:
            $ref: '#/definitions/EsOrderUser'
          surveys:
            type: object
            additionalProperties:
              $ref: '#/definitions/EsCheckoutSurvey'
          claimCode:
            type: string
          isRefundPending:
            type: boolean
          refundPolicy:
            type: string
          isRefundable:
            type: boolean
          refundAvailableUntil:
            type: integer
          refunds:
            type: array
            items:
              $ref: '#/definitions/EsRefund'
  
  EsRefundRequest:
    properties:
      message:
        type: string
      quantity:
        type: integer
    required:
      - quantity
      - reason
    type: object
  
  EsRefund:
    type: object
    allOf:
      - $ref: '#/definitions/EsRefundRequest'
      - properties:
          requestedWhen:
            type: integer
          processedWhen:
            type: integer
          isProcessed:
            type: boolean
          processedById:
            type: string
          quantity:
            type: integer
          message:
            type: integer
          merchantNotes:
            type: string
          amountRefunded:
            type: integer
            
  EsOrderItemPromotion:
    type: object
    properties:
      discountType: 
        type: string
      memberId:
        type: string
      membershipId:
        type: integer
      membershipName:
        type: string
      referralCode:
        type: string
      appliedWhen:
        type: integer
      discountByAmount:
        type: integer
        minimum: 0
      discountByPercentage:
        type: number
        minimum: 0
        maximum: 0

  EsTransaction:
    type: object
    properties:
      id:
        type: string
      created:
        minimum: 0
        type: integer
        default: 0
      chargeId:
        type: string
      refunds:
        type: array
        items:
          $ref: '#/definitions/EsTransactionRefund'
      amount:
        minimum: 0
        default: 0
        type: integer
      platformFee:
        minimum: 0
        type: integer
        default: 0
      net:
        minimum: 0
        type: integer
        default: 0
      paymentProcessorFee:
        minimum: 0
        type: integer
        default: 0
      paymentProcessorExchangeRate:
        minimum: 0
        type: number
        format: float
        default: 0
      refundTotal:
        minimum: 0
        type: integer
        default: 0
      refundedInPresentmentCurrency:
        minimum: 0
        type: integer
        default: 0
      refundStatus:
        type: string
      platformFeeId:
        type: string
      idempotencyKey:
        type: string
      exchange:
        $ref: '#/definitions/EsTransactionExchange'
  
  EsTransactionRefund:
    type: object
    properties:
      id:
        type: string
      created:
        type: integer
        minimum: 0
        default: 0
      amount:
        type: integer
        minimum: 0
        default: 0
      itemsCancelledIds:
        type: array
        items:
          type: string
      reason:
        type: string
      idempotencyKey:
        type: string
  
  EsTransactionExchange:
    type: object
    properties:
      id:
        type: string
      rate:
        type: string
  
  EsSubscription:
    type: object
    properties:
      id:
        type: string
      amount:
        type: integer
        minimum: 0
        default: 0
      billingCycleAnchorTimestamp:
        type: integer
        minimum: 0
        default: 0
      interval:
        type: string
      intervalCount:
        type: integer
        minimum: 0
        default: 0
      created:
        type: integer
        minimum: 0
        default: 0
      planId:
        type: string
      totalNumberOfPayments:
        type: integer
        minimum: 0
        default: 0
      canceled:
        type: boolean
        default: false
  
  EsOrderItemStatus:
    properties:
      id:
        type: string
      surveyResponses:
        type: object
        additionalProperties:
          type: string
    type: object

  EsOrderUser:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
    
  EsPagedMember:
    properties:
      deleted:
        items:
          type: string
        type: array
      items:
        items:
          $ref: '#/definitions/EsMember'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagedMembership:
    properties:
      facets:
        type: object
      items:
        items:
          $ref: '#/definitions/EsMembership'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagedOrder:
    properties:
      items:
        items:
          $ref: '#/definitions/EsOrder'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagedOrderItem:
    properties:
      items:
        items:
          $ref: '#/definitions/EsOrderItem'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagedPermission:
    properties:
      allPermission:
        items:
          type: string
        type: array
      items:
        items:
          $ref: '#/definitions/EsPermission'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagedPermissionInvite:
    properties:
      allPermission:
        items:
          type: string
        type: array
      items:
        items:
          $ref: '#/definitions/EsPermissionInvite'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagedStoreItem:
    properties:
      items:
        items:
          $ref: '#/definitions/EsStoreItem'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagedUserMembership:
    properties:
      facets:
        type: object
      items:
        items:
          $ref: '#/definitions/EsUserMembership'
        type: array
      pageData:
        $ref: '#/definitions/EsPagination'
    type: object
  EsPagination:
    properties:
      nextCursor:
        type: string
      pageSize:
        format: int32
        type: integer
      total:
        format: int32
        type: integer
    type: object
  EsPaymentInput:
    properties:
      email:
        type: string
      name:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      paymentMethodId:
        type: string
      source:
        type: string
    required:
      - email
      - name
    type: object
  EsPermission:
    properties:
      accountId:
        type: string
      creatorId:
        type: string
      email:
        type: string
      entityId:
        type: string
      entityType:
        type: string
      id:
        type: string
      modifiedOn:
        type: string
      name:
        type: string
      permissions:
        type: object
      picture:
        type: string
    type: object
  EsPermissionAccept:
    properties:
      invite:
        $ref: '#/definitions/EsPermissionInvite'
      permission:
        $ref: '#/definitions/EsPermission'
    type: object
  EsPermissionCheck:
    properties:
      hasPermission:
        type: boolean
      permission:
        $ref: '#/definitions/EsPermission'
    type: object
  EsPermissionInput:
    properties:
      permissions:
        type: array
        items:
          type: string
    type: object
  EsPermissionInvite:
    properties:
      acceptedById:
        type: string
      acceptedByName:
        type: string
      acceptedWhen:
        type: integer
      creatorId:
        type: string
      declinedWhen:
        type: integer
      email:
        type: string
      entityId:
        type: string
      entityType:
        type: string
      id:
        type: string
      message:
        type: string
      modifiedOn:
        type: string
      permissions:
        type: object
    type: object
  EsPermissionInviteCreate:
    properties:
      emails:
        items:
          type: string
        type: array
      invitedByName:
        type: string
      message:
        type: string
      permissions:
        items:
          type: string
        type: array
    required:
      - emails
      - permissions
    type: object
  EsPromotionInput:
    properties:
      memberId:
        type: string
      membershipId:
        type: integer
      referralCode:
        type: string
    type: object
      
  EsStoreItem:
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsStoreItemUpdate'
      - properties:
          discounts:
            items:
              $ref: '#/definitions/EsDiscount'
            type: array
          merchantId:
            type: string
          merchantName:
            type: string
          totalSold:
            format: int32
            type: integer
          storeCurrency:
            type: string
          exchangeRates:
            type: object
            additionalProperties:
              $ref: '#/definitions/EsExchangeRate'
    type: object
  
  EsExchangeRate:
    type: number
    format: float
  EsExchange: 
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          rates:
            type: object
            additionalProperties:
              $ref: '#/definitions/EsExchangeRate'
          base:
            type: string
          spread:
            type: number
            format: float
  EsStoreItemUpdate:
    properties:
      availableCurrencies:
        items:
          type: string
        type: array
      itemType:
        type: string
      filters:
        type: array
        items:
          type: string
      category:
        enum:
          - event
          - membership
        type: string
      categoryId:
        type: string
      name:
        type: string
      shortName:
        type: string
      link:
        type: string
      picture:
        type: string
      info:
        type: string
      totalInventory:
        format: int32
        type: integer
      startSaleTimestamp:
        type: integer
        minimum: 0
      endSaleTimestamp:
        type: integer
        minimum: 0
      isFree:
        type: boolean
        default: false
      requireCC:
        type: boolean
        default: true
      status:
        enum:
          - open
          - closed
          - soldOut
        type: string
      metadata:
        type: object
      surveys:
        type: object
        additionalProperties:
          $ref: '#/definitions/EsCheckoutSurveyInput'
      unlockSecret:
        type: string
      retailPrice:
        format: int32
        type: integer
      oneOffPayment:
        type: boolean
        default: false
      recurring:
        type: boolean
        default: false
      recurringOptions:
        $ref: '#/definitions/EsRecurringInput'
      discounts:
        items:
          $ref: '#/definitions/EsDiscountInput'
        type: array
      refundAvailableUntil:
        type: number
        format: integer
      refundPolicy:
        type: string
      isRefundable:
        type: boolean
      timezone:
        type: string
    required:
      - name
      - category
      - categoryId
      - itemType
      - totalInventory
      - startSaleTimestamp
      - endSaleTimestamp
      - retailPrice
      - timezone
    type: object
  
  EsCheckoutSurveyInput:
    type: object
    properties:
      service:
        type: string
      surveyId:
        type: string
  
  EsCheckoutSurvey:
    type: object
    allOf:
      - $ref: '#/definitions/EsCheckoutSurveyInput'
      - properties:
          completedWhen:
            type: integer
            minimum: 0
          isCompleted:
            type: boolean
  
  EsRecurringInput:
    type: object
    required:
      - isInstallment
    properties:
      deposit:
        type: integer
        minimum: 0
      isInstallment:
        type: boolean
        default: false
      intervalOptions:
        type: array
        items:
          type: string
          enum:
            - week
            - month
            - year
      payByTimestamp:
        type: integer
        minimum: 0
      availableUntil:
        type: integer
        minimum: 0
  EsStoreItemCreate:
    type: object
    allOf:
      - $ref: '#/definitions/EsStoreItemUpdate'
      - properties:
          merchantId:
            type: string
    required:
      - merchantId
  EsSuccess:
    properties:
      message:
        type: object
      success:
        type: boolean
    type: object
  EsUserMembership:
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsUserMembershipUpdate'
      - properties:
          id:
            type: string
          memberId:
            type: string
          membershipId:
            type: integer
          membershipName:
            type: string
    type: object
  EsUserMembershipUpdate:
    properties:
      memberId:
        type: string
      membershipId:
        type: integer
      membershipName:
        type: string
    required:
      - membershipId
      - membershipName
      - memberId
    type: object
  
  EsFeedItem:
    type: object
    properties:
      id:
        type: string
      actor:
        $ref: '#/definitions/EsOrderUser'
      foreignId:
        type: string
      object:
        type: object
      time:
        type: string
      verb:
        type: string
  
  EsPagedFeedItem:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/EsFeedItem'
      pageData:
        $ref: '#/definitions/EsPagination'
  
  EsValidationInput:
    type: object
    properties:
      surveyResponses:
        type: array
        items:
          type: string

securityDefinitions:
  Authorization:
    in: header
    name: Authorization
    description: Required Authorization Key
    type: apiKey
  AuthorizationOptional:
    in: header
    name: Authorization
    description: Optional Authorization Key
    type: apiKey
  ClientKey:
    in: header
    name: X-Client-Key
    description: Client Key
    type: apiKey
security:
  - Authorization: []
    ClientKey: []
tags:
  - description: Permissions manager
    name: esPermissions
  - description: Merchant management
    name: esMerchants
  - description: Store management
    name: esStore
  - description: User Cart for store items
    name: esCart
  - description: Order items for user
    name: esOrder
  - description: Merchant Order items
    name: esOrderItems
  - description: Customers of eDropin
    name: esCustomers
  - description: Memberships managed in eDropin
    name: esMemberships
  - description: User memberships managed in eDropin
    name: esUserMemberships
  - description: Currency Exchange
    name: esCurrencyExchange

parameters:
  accountId:
    description: Account Id
    in: path
    name: accountId
    required: true
    type: string
  cardId:
    description: Card Id
    in: path
    name: cardId
    required: true
    type: string
  cursor:
    description: Start Cursor for query
    in: query
    name: cursor
    type: string
  enhanced:
    description: Gives you a more detailed entity but requires admin permissions usually
    in: query
    name: enhanced
    required: false
    type: boolean
  entityId:
    description: Entity Id
    in: path
    name: entityId
    required: true
    type: string
  entityType:
    description: Entity Type
    in: path
    name: entityType
    required: true
    type: string
  expand:
    collectionFormat: multi
    description: Expands the properties in the array
    in: query
    items:
      type: string
    name: expand
    required: false
    type: array
  itemId:
    description: Store Item Id
    in: path
    name: itemId
    required: true
    type: string
  itemType:
    description: Store Item Type
    in: path
    name: itemType
    required: true
    type: string
  limit:
    default: 20
    description: Number of items returned
    exclusiveMaximum: false
    exclusiveMinimum: true
    format: int32
    in: query
    maximum: 100
    minimum: 0
    multipleOf: 10
    name: limit
    type: integer
  membershipId:
    description: Membership Id
    in: path
    name: membershipId
    required: true
    type: string
  merchantId:
    description: Merchant Id
    in: path
    name: merchantId
    required: true
    type: string
  orderId:
    description: Order Id
    in: path
    name: orderId
    required: true
    type: string
  orderItemId:
    description: Order Item Id
    in: path
    name: orderItemId
    required: true
    type: string
  searchFacets:
    description: 'e.g JSON.stringify([profiledIds:edropin],[profileIds:agdontario])'
    in: query
    name: facets
    type: string
  searchQuery:
    in: query
    name: q
    type: string
  userMembershipId:
    description: User membership id
    in: path
    name: userMembershipId
    required: true
    type: string
responses:
  Default500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/EsDefaultError'
  InvalidInputResponse:
    description: Validation exception
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string

