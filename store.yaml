swagger: '2.0'
info:
  description: Store service for eDropin
  version: 1.0.0
  title: eDropin Store
  license:
    name: UNLICENSED
  contact:
    name: Saj Arora
    email: dev@edropin.com
host: store-dot-edropin-play.appspot.com
basePath: /
tags:
  - name: esMerchants
    description: Merchant management
  - name: esStore
    description: Store management
  - name: esCart
    description: User Cart for store items
  - name: esOrder
    description: Order items for user
  - name: esCustomers
    description: Customers of eDropin
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  Authorization:
    type: apiKey
    in: header
    name: Authorization
  ClientKey:
    type: apiKey
    in: header
    name: X-Client-Key
security:
  - ClientKey: []
    Authorization: []
paths:
  '/merchants/{merchantId}':
    parameters:
      - $ref: '#/parameters/merchantId'
    get:
      tags:
        - esMerchants
      summary: Get a Merchant from the directory
      operationId: getMerchant
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - esMerchants
      summary: Enable billing
      operationId: enableBilling
      parameters:
        - in: body
          name: stripeCode
          description: Stripe Code To Enable Billing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Billing updated
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Profile not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/sell/{itemType}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/itemType'
    put:
      tags:
        - esMerchants
      summary: 'Setup fee structure for merchant [Admin Only]'
      operationId: updateFeeStructure
      parameters:
        - in: body
          name: feeProps
          required: true
          description: Fee structure
          schema:
            $ref: '#/definitions/EsFeeStructure'
      responses:
        '200':
          description: Merchant fee structure updated
          schema:
            $ref: '#/definitions/EsMerchant'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Profile not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    get:
      tags:
        - esMerchants
      summary: Check merchant is able to sell an item type
      operationId: canMerchantSellItem
      responses:
        '200':
          description: Merchant has Permission
          schema:
            $ref: '#/definitions/EsPermissionCheck'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/permissions/{accountId}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/accountId'
    get:
      tags:
        - esMerchants
      summary: Get permission for account
      operationId: getAccountPermissionForMerchant
      responses:
        '200':
          description: Permissions for account
          schema:
            $ref: '#/definitions/EsPermission'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - esMerchants
      summary: Set permission for merchant
      operationId: setMerchantPermission
      parameters:
        - in: body
          name: permissionProps
          description: Permissions
          required: true
          schema:
            $ref: '#/definitions/EsPermissionInput'
      responses:
        '200':
          description: Permission set
          schema:
            $ref: '#/definitions/EsPermission'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/permissions/{accountId}/check':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/accountId'
    get:
      tags:
        - esMerchants
      summary: Check account has permission
      operationId: checkAccountHasPermission
      parameters:
        - in: query
          type: string
          required: true
          name: permission
      responses:
        '200':
          description: Account has Permission
          schema:
            $ref: '#/definitions/EsPermissionCheck'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/all-permissions':
    parameters:
      - $ref: '#/parameters/merchantId'
    get:
      tags:
        - esMerchants
      summary: List all merchant permissions
      operationId: getMerchantPermission
      parameters:
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: List of Users with permissions linked to this merchant
          schema:
            $ref: '#/definitions/EsPagedPermission'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/store/{merchantId}/items':
    get:
      parameters:
        - $ref: '#/parameters/merchantId'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      tags:
        - esStore
      summary: Get all store items for merchant
      operationId: listStoreItems
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/store/{merchantId}/items/{itemId}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/itemId'
    get:
      tags:
        - esStore
      security:
        - ClientKey: []
        - ClientKey: []
          Authorization: []
      summary: Get a store item from the directory
      operationId: getStoreItem
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    put:
      tags:
        - esStore
      summary: Upsert a store item
      operationId: upsertStoreItem
      parameters:
        - in: body
          name: storeItemProps
          description: Store Item that needs to be upserted
          required: true
          schema:
            $ref: '#/definitions/EsStoreItemUpdate'
      responses:
        '200':
          description: Store Item updated
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      tags:
        - esStore
      summary: Delete an existing Store Item
      operationId: deleteStoreItem
      responses:
        '204':
          description: Event deleted
          schema:
            $ref: '#/definitions/EsStoreItem'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: StoreItem not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  /cart:
    get:
      tags:
        - esCart
      summary: Get all user carts (all currency codes)
      operationId: listAllCarts
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/EsCart'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/cart/{currencyCode}':
    parameters:
      - $ref: '#/parameters/currencyCode'
    get:
      tags:
        - esCart
      summary: Get the users cart for currency code
      operationId: getCartForCurrencyCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsCartDetail'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      tags:
        - esCart
      summary: Empty the user cart
      operationId: emptyCart
      responses:
        '204':
          description: Cart deleted
          schema:
            $ref: '#/definitions/EsCartDetail'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/cart/upsert/merchants/{merchantId}/items/{itemId}':
    parameters:
      - $ref: '#/parameters/merchantId'
      - $ref: '#/parameters/itemId'
    put:
      tags:
        - esCart
      summary: Upsert item to cart (Item will go into the right currency cart)
      operationId: upsertCartItem
      parameters:
        - in: body
          name: cartItemProps
          description: Cart Item that needs to be upserted
          required: true
          schema:
            $ref: '#/definitions/EsCartItemInput'
      responses:
        '200':
          description: Cart Item upserted
          schema:
            $ref: '#/definitions/EsCartDetail'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      tags:
        - esCart
      summary: Delete a cart item
      operationId: deleteCartItem
      responses:
        '204':
          description: Cart Item deleted
          schema:
            $ref: '#/definitions/EsCartDetail'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/cart/{currencyCode}/validate':
    parameters:
      - $ref: '#/parameters/currencyCode'
    post:
      tags:
        - esCart
      summary: Validate Cart for a currency to ensure all items are available and pricing is all up to date and there are not potential conflicts
      operationId: validateCart
      responses:
        '200':
          description: Cart Item validated
          schema:
            $ref: '#/definitions/EsCartDetail'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/cart/{currencyCode}/checkout':
    parameters:
      - $ref: '#/parameters/currencyCode'
    post:
      tags:
        - esCart
      summary: Endpoint to charge the customer for the items in their cart.
      parameters:
        - in: body
          name: paymentProps
          description: Payment props for checkout
          required: true
          schema:
            $ref: '#/definitions/EsPaymentInput'
      operationId: checkoutCart
      responses:
        '200':
          description: List of orderItems grouped by merchant as Order that the user has checked out
          schema:
            type: array
            items:
              $ref: '#/definitions/EsOrder'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Cart Store Item not found
        '405':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/orders':
    get:
      tags:
        - esOrder
      summary: Get orders for by merchant (merchant use only)
      parameters:
        - $ref: '#/parameters/merchantId'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      operationId: listOrdersByMerchant
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedOrder'
        '400':
          description: Invalid ID supplied
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  /orders:
    get:
      tags:
        - esOrder
      summary: Get orders for current user
      parameters:
        - in: query
          name: merchantId
          required: false
          type: string
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      operationId: listOrders
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedOrder'
        '400':
          description: Invalid ID supplied
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/orders/{orderId}':
    parameters:
      - $ref: '#/parameters/orderId'
    get:
      tags:
        - esOrder
      summary: Get order by id
      operationId: getOrder
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsOrder'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  /order-items:
    get:
      tags:
        - esOrder
      summary: List user order items
      operationId: listOrderItems
      parameters:
        - in: query
          name: merchantId
          required: false
          type: string
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedOrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/merchants/{merchantId}/order-items':
    get:
      tags:
        - esOrder
      summary: List merchant order items
      operationId: listOrderItemsByMerchant
      parameters:
        - $ref: '#/parameters/merchantId'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EsPagedOrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store Item not found
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  /customers:
    get:
      tags:
        - esCustomers
      summary: Get the users customer information
      operationId: getUserCustomer
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/EsCustomer'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
    post:
      tags:
        - esCustomers
      summary: Create a customer
      operationId: addCustomer
      parameters:
        - in: body
          name: paymentProps
          description: Payment props for checkout
          required: true
          schema:
            $ref: '#/definitions/EsCustomerInput'
      responses:
        '200':
          description: A new Customer
          schema:
            $ref: '#/definitions/EsCustomer'
        '400':
          description: Invalid attributes
        '401':
          $ref: '#/responses/UnauthorizedError'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
  '/customers/{customerId}':
    parameters:
      - $ref: '#/parameters/customerId'
    delete:
      tags:
        - esCustomers
      summary: Remove a customer
      operationId: removeCustomer
      responses:
        '200':
          description: Customer removed
          schema:
            $ref: '#/definitions/EsSuccess'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '500':
          $ref: '#/responses/Default500ErrorResponse'
parameters:
  limit:
    name: limit
    in: query
    description: Number of items returned
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: true
    maximum: 50
    exclusiveMaximum: false
    multipleOf: 10
    default: 20
  cursor:
    name: cursor
    in: query
    description: Start Cursor for query
    type: string
  accountId:
    name: accountId
    in: path
    description: Account Id
    type: string
    required: true
  customerId:
    name: customerId
    in: path
    description: Customer Id
    type: string
    required: true
  merchantId:
    name: merchantId
    in: path
    description: Merchant Id
    type: string
    required: true
  orderId:
    name: orderId
    in: path
    description: Order Id
    type: string
    required: true
  itemId:
    name: itemId
    in: path
    description: Store Item Id
    type: string
    required: true
  itemType:
    name: itemType
    in: path
    description: Store Item Type
    type: string
    required: true
  currencyCode:
    name: currencyCode
    in: path
    description: Currency Code
    type: string
    required: true
responses:
  Default500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/EsDefaultError'
  InvalidInputResponse:
    description: Validation exception
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string
definitions:
  EsBaseId:
    type: object
    properties:
      id:
        type: string
      createdOn:
        type: string
        readOnly: true
      modifiedOn:
        type: string
        readOnly: true
  EsSuccess:
    type: object
    properties:
      success:
        type: boolean
      message:
        type: object
  EsDefaultError:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  EsPagination:
    type: object
    properties:
      pageSize:
        type: integer
        format: int32
      nextCursor:
        type: string
      total:
        type: integer
        format: int32
  EsPermission:
    type: object
    properties:
      id:
        type: string
      creatorId:
        type: string
      entityKind:
        type: string
      entityId:
        type: string
      permissions:
        type: object
  EsPermissionInput:
    type: object
    properties:
      permissions:
        type: object
  EsPagedPermission:
    type: object
    properties:
      pageData:
        $ref: '#/definitions/EsPagination'
      allPermission:
        type: array
        items:
          type: string
      items:
        type: array
        items:
          $ref: '#/definitions/EsPermission'
  EsPermissionCheck:
    type: object
    properties:
      hasPermission:
        type: boolean
  EsFeeStructure:
    type: object
    required:
      - feeType
      - feeAmount
    properties:
      perItem:
        type: boolean
        default: true
      active:
        type: boolean
        default: true
      feeType:
        type: string
        enum:
          - fixed
          - percentage
          - none
      feeMaximum:
        type: integer
      feeMinimum:
        type: integer
        default: 0
      feeAmount:
        type: integer
        default: 0
  EsMerchant:
    type: object
    required:
      - name
      - stripeId
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          name:
            type: string
          stripeId:
            type: string
          feeStructure:
            type: object
            additionalProperties:
              $ref: '#/definitions/EsFeeStructure'
  EsStoreItemUpdate:
    type: object
    required:
      - name
      - itemType
      - totalInventory
      - currencyCode
    properties:
      itemType:
        type: string
      name:
        type: string
      picture:
        type: string
      description:
        type: string
      price:
        type: integer
      totalInventory:
        type: integer
      currencyCode:
        type: string
      contentPolicy:
        type: string
      status:
        type: string
        enum:
          - open
          - closed
          - soldOut
        default: open
  EsStoreItem:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - $ref: '#/definitions/EsStoreItemUpdate'
      - properties:
          merchantId:
            type: string
            readOnly: true
          merchantName:
            type: string
            readOnly: true
          totalSold:
            type: integer
            readOnly: true
          active:
            type: boolean
            readOnly: true
  EsPagedStoreItem:
    type: object
    properties:
      pageData:
        $ref: '#/definitions/EsPagination'
      items:
        type: array
        items:
          $ref: '#/definitions/EsStoreItem'
  EsCart:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          currencyCode:
            type: string
            readOnly: true
          quantity:
            type: integer
            readOnly: true
          subtotal:
            type: integer
            readOnly: true
  EsCartDetail:
    type: object
    allOf:
      - $ref: '#/definitions/EsCart'
      - properties:
          items:
            additionalProperties:
              $ref: '#/definitions/EsCartItem'
          saveForLater:
            additionalProperties:
              $ref: '#/definitions/EsCartItem'
  EsCartItemInput:
    type: object
    properties:
      quantity:
        type: integer
  EsCartItem:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          currencyCode:
            type: string
          merchantId:
            type: string
          merchantName:
            type: string
          itemType:
            type: string
          name:
            type: string
          picture:
            type: string
          price:
            type: integer
          quantity:
            type: integer
  EsPaymentInput:
    type: object
    properties:
      customerId:
        type: string
      source:
        type: string
      email:
        type: string
      name:
        type: string
  EsOrderItem:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          currencyCode:
            type: string
          merchantId:
            type: string
          merchantName:
            type: string
          storeItemId:
            type: string
          orderId:
            type: string
          chargeId:
            type: string
          itemType:
            type: string
          name:
            type: string
          picture:
            type: string
          description:
            type: string
          contentPolicy:
            type: string
          retailPrice:
            type: integer
          quantity:
            type: integer
          charge:
            type: integer
          edropinFee:
            type: integer
          status:
            type: string
            enum:
              - pending
              - inProcess
              - complete
  EsPagedOrderItem:
    type: object
    properties:
      pageData:
        $ref: '#/definitions/EsPagination'
      items:
        type: array
        items:
          $ref: '#/definitions/EsOrderItem'
  EsOrder:
    type: object
    allOf:
      - $ref: '#/definitions/EsCart'
      - properties:
          currencyCode:
            type: string
          email:
            type: string
          name:
            type: string
          quantity:
            type: integer
          charge:
            type: integer
          chargeId:
            type: string
          edropinFee:
            type: integer
          status:
            type: string
            enum:
              - pending
              - inProcess
              - complete
          items:
            additionalProperties:
              $ref: '#/definitions/EsCartItem'
          toMerchant:
            type: integer
  EsPagedOrder:
    type: object
    properties:
      pageData:
        $ref: '#/definitions/EsPagination'
      items:
        type: array
        items:
          $ref: '#/definitions/EsOrder'
  EsCustomerInput:
    type: object
    required:
      - name
      - email
      - source
    properties:
      name:
        type: string
      email:
        type: string
      source:
        type: string
  EsCustomer:
    type: object
    allOf:
      - $ref: '#/definitions/EsBaseId'
      - properties:
          name:
            type: string
          email:
            type: string
          stripe:
            type: object
